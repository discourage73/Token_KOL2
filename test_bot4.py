import os
import logging
import time
import asyncio
import datetime
import traceback
import requests
import telegram
from typing import Dict, Any, Optional, List, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TimedOut, NetworkError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
import token_storage
from config import TELEGRAM_TOKEN, logger
from utils import format_number, format_tokens_list

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ token_service, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
from token_service import (
    get_token_info as original_get_token_info,
    process_token_address, 
    check_all_market_caps, 
    check_market_cap_only
)

# –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ test_bot_commands
from test_bot_commands import (
    start,
    help_command,
    list_tokens,
    excel_command,
    clear_tokens,
    handle_clear_confirm,
    handle_clear_cancel,
    handle_refresh_list,
    handle_generate_excel,
    setup_bot_commands,
    setup_commands_direct,
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    handle_clear_all_confirm,
    handle_clear_selective,
    handle_hide_token,
    handle_manage_hidden,
    handle_unhide_token,
    handle_clear_return,
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    handle_delete_all_confirm,
    handle_delete_confirm,
    handle_delete_selective,
    handle_delete_token
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug_logger = logging.getLogger('debug')
debug_logger.setLevel(logging.DEBUG)
# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
debug_handler = logging.FileHandler('logs/debug.log', encoding='utf-8')
debug_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
debug_logger.addHandler(debug_handler)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(levelname)s: %(message)s')
console_handler.setFormatter(console_formatter)
debug_logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ DEX
def fetch_dex_data(contract_address: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ DEX –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API DexScreener.
    """
    try:
        debug_logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ DEX –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract_address}")
        url = f"https://api.dexscreener.com/latest/dex/tokens/{contract_address}"
        
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            debug_logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ DEX –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract_address}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            pairs = data.get('pairs', [])
            dex_names = [pair.get('dexId', 'Unknown') for pair in pairs]
            debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(pairs)} –ø–∞—Ä–∞—Ö. DEX: {', '.join(dex_names)}")
            
            return data
        else:
            debug_logger.warning(f"–û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ DEX")
            return {"pairs": []}
    except Exception as e:
        debug_logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ DEX: {str(e)}")
        debug_logger.error(traceback.format_exc())
        return {"pairs": []}

async def get_token_info(
    query: str, 
    chat_id: int, 
    message_id: Optional[int] = None, 
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id is None:
            token_info = await original_get_token_info(query, None, None, None)
        else:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º original_get_token_info –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            token_info = await original_get_token_info(query, None, None, None)
            
        if not token_info:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        stored_data = token_storage.get_token_data(query)
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        if not stored_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            current_time = datetime.datetime.now().strftime("%H:%M:%S")
            initial_data = {
                'time': current_time,
                'market_cap': token_info.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'raw_market_cap': token_info.get('raw_market_cap', 0)
            }
            stored_data = {
                'initial_data': initial_data,
                'token_info': token_info
            }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        token_info['dex_info'] = 'Unknown DEX'
        token_info['txns_trend'] = {
            "m5_buys": 0,
            "m5_sells": 0,
            "h1_buys": 0,
            "h1_sells": 0,
            "h24_buys": 0,
            "h24_sells": 0,
            "status": "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥"
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ—Ö DEX
        try:
            # –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
            dex_data = fetch_dex_data(query)
            
            if dex_data and 'pairs' in dex_data and dex_data['pairs']:
                pairs = dex_data.get('pairs', [])
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ DEX –∏ PUMPFUN DEX
                popular_dex, pumpfun_dex = find_dexes_info(dex_data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DEX
                if popular_dex:
                    token_info['dex_info'] = popular_dex.get('dexId', 'Unknown DEX')
                    #token_info['txns_trend'] = analyze_transactions(popular_dex.get('txns', {}))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PUMPFUN, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                if pumpfun_dex:
                    token_info['pumpfun_data'] = {
                        'txns': pumpfun_dex.get('txns', {}),
                        'boosts': pumpfun_dex.get('boosts', {}).get('active', None)
                    }
        except Exception as e:
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö DEX: {str(e)}")
            debug_logger.error(traceback.format_exc())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message = format_enhanced_message(token_info, stored_data.get('initial_data', {}))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{query}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å context –∏ chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if context and chat_id:
            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                try:
                    sent_msg = await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                        disable_web_page_preview=True
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    token_data_to_store = {
                        'last_update_time': time.time(),
                        'message_id': sent_msg.message_id,
                        'chat_id': sent_msg.chat_id,
                        'initial_data': stored_data.get('initial_data', {}),
                        'token_info': token_info,
                        'last_alert_multiplier': stored_data.get('last_alert_multiplier', 1),
                        'added_time': stored_data.get('added_time', time.time()),
                        'raw_api_data': stored_data.get('raw_api_data', {})
                    }
                    
                    token_storage.store_token_data(query, token_data_to_store)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return token_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_token_info: {str(e)}")
        return None
        
        
def find_dexes_info(dex_data: Dict[str, Any]) -> Tuple[Dict[str, Any], Dict[str, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π DEX –∏ PUMPFUN DEX –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–æ—Å–Ω–æ–≤–Ω–æ–π_dex, pumpfun_dex)
    """
    try:
        pairs = dex_data.get("pairs", [])
        debug_logger.info(f"–ê–Ω–∞–ª–∏–∑ {len(pairs)} –ø–∞—Ä DEX")
        
        popular_dex = None
        pumpfun_dex = None
        max_txns = 0
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 2-—Ö –ø–∞—Ä, —Å—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if len(pairs) < 2:
            debug_logger.info(f"–í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(pairs)} –ø–∞—Ä DEX")
        
        for pair in pairs:
            dex_id = pair.get('dexId', 'Unknown')
            txns = pair.get('txns', {})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug_logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º DEX: {dex_id}, URL: {pair.get('url', 'No URL')}")
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞
            h24_data = txns.get('h24', {})
            h24_buys = h24_data.get('buys', 0) if isinstance(h24_data, dict) else 0
            h24_sells = h24_data.get('sells', 0) if isinstance(h24_data, dict) else 0
            total_txns = h24_buys + h24_sells
            
            debug_logger.info(f"DEX: {dex_id}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (24—á): {total_txns} (–ø–æ–∫—É–ø–∫–∏: {h24_buys}, –ø—Ä–æ–¥–∞–∂–∏: {h24_sells})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ PUMPFUN –ª–∏ —ç—Ç–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
            if dex_id.lower() in ['pumpfun', 'pump.fun', 'pump fun']:
                pumpfun_dex = pair
                debug_logger.info(f"–ù–∞–π–¥–µ–Ω PUMPFUN DEX")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∞–º—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX
            if total_txns > max_txns:
                max_txns = total_txns
                popular_dex = pair
                debug_logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX: {dex_id} —Å {total_txns} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
        
        # –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if not popular_dex and pairs:
            popular_dex = pairs[0]
            debug_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é: {popular_dex.get('dexId', 'Unknown')}")
        
        # –ï—Å–ª–∏ popular_dex —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if popular_dex:
            debug_logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ DEX: {popular_dex.get('dexId', 'Unknown')}")
        else:
            debug_logger.warning("–ü–æ–ø—É–ª—è—Ä–Ω—ã–π DEX –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return popular_dex, pumpfun_dex
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ DEX: {str(e)}")
        debug_logger.error(traceback.format_exc())
        return None, None

# –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyze_transactions –ø–æ–ª–Ω–æ—Å—Ç—å—é

async def get_token_info(
    query: str, 
    chat_id: int, 
    message_id: Optional[int] = None, 
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id is None:
            token_info = await original_get_token_info(query, None, None, None)
        else:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º original_get_token_info –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            token_info = await original_get_token_info(query, None, None, None)
            
        if not token_info:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        stored_data = token_storage.get_token_data(query)
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        if not stored_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            current_time = datetime.datetime.now().strftime("%H:%M:%S")
            initial_data = {
                'time': current_time,
                'market_cap': token_info.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'raw_market_cap': token_info.get('raw_market_cap', 0)
            }
            stored_data = {
                'initial_data': initial_data,
                'token_info': token_info
            }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        token_info['dex_info'] = 'Unknown DEX'
        # –£–±–∏—Ä–∞–µ–º txns_trend, —Ç–∞–∫ –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ—Ö DEX
        try:
            url = f"https://api.dexscreener.com/latest/dex/tokens/{query}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                dex_data = response.json()
                pairs = dex_data.get('pairs', [])
                
                popular_dex = None
                pumpfun_dex = None
                max_txns = 0
                
                # –ù–∞—Ö–æ–¥–∏–º PUMPFUN –∏ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX
                for pair in pairs:
                    dex_id = pair.get('dexId', 'Unknown')
                    txns = pair.get('txns', {})
                    
                    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞
                    h24_data = txns.get('h24', {})
                    h24_buys = h24_data.get('buys', 0) if isinstance(h24_data, dict) else 0
                    h24_sells = h24_data.get('sells', 0) if isinstance(h24_data, dict) else 0
                    total_txns = h24_buys + h24_sells
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ PUMPFUN –ª–∏ —ç—Ç–æ
                    if dex_id.lower() in ['pumpfun', 'pump.fun', 'pump fun']:
                        pumpfun_dex = pair
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∞–º—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX
                    if total_txns > max_txns:
                        max_txns = total_txns
                        popular_dex = pair
                
                # –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π DEX –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if not popular_dex and pairs:
                    popular_dex = pairs[0]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DEX
                if popular_dex:
                    token_info['dex_info'] = popular_dex.get('dexId', 'Unknown DEX')
                    # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ analyze_transactions –∑–¥–µ—Å—å
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PUMPFUN, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                if pumpfun_dex:
                    token_info['pumpfun_data'] = {
                        'txns': pumpfun_dex.get('txns', {}),
                        'boosts': pumpfun_dex.get('boosts', {}).get('active', None)
                    }
        except Exception:
            pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message = format_enhanced_message(token_info, stored_data.get('initial_data', {}))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{query}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å context –∏ chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if context and chat_id:
            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                try:
                    sent_msg = await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                        disable_web_page_preview=True
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    token_data_to_store = {
                        'last_update_time': time.time(),
                        'message_id': sent_msg.message_id,
                        'chat_id': sent_msg.chat_id,
                        'initial_data': stored_data.get('initial_data', {}),
                        'token_info': token_info,
                        'last_alert_multiplier': stored_data.get('last_alert_multiplier', 1),
                        'added_time': stored_data.get('added_time', time.time()),
                        'raw_api_data': stored_data.get('raw_api_data', {})
                    }
                    
                    token_storage.store_token_data(query, token_data_to_store)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return token_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_token_info: {str(e)}")
        return None

def format_enhanced_message(token_info: Dict[str, Any], initial_data: Optional[Dict[str, Any]] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ."""
    try:
        debug_logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –≤ Twitter/X.com
        ticker_address = token_info.get('ticker_address', '')
        twitter_search_link = f"https://twitter.com/search?q={ticker_address}"
        
        message = f"ü™ô *–¢–∏–∫–µ—Ä*: {token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} [Xca]({twitter_search_link})\n"
        message += f"üìù *–ê–¥—Ä–µ—Å*: `{token_info.get('ticker_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n\n"
        
        # –ë–ª–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∞–π—Ç—ã (–ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö)
        if 'websites' in token_info and token_info.get('websites'):
            website_links = [f"[{website.get('label', 'Website')}]({website.get('url', '')})" 
                           for website in token_info.get('websites', []) if website.get('url')]
            
            if website_links:
                message += f"üåê *–°–∞–π—Ç—ã*: {' | '.join(website_links)}\n"
                debug_logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã: {website_links}")
        
        # –ë–ª–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö)
        if 'socials' in token_info and token_info.get('socials'):
            social_links = [f"[{social.get('type', '').capitalize()}]({social.get('url', '')})" 
                          for social in token_info.get('socials', []) if social.get('url') and social.get('type')]
            
            if social_links:
                message += f"üì± *–°–æ—Ü—Å–µ—Ç–∏*: {' | '.join(social_links)}\n\n"
                debug_logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏: {social_links}")
        else:
            message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ü—Å–µ—Ç–µ–π
        
        message += f"üí∞ *Market Cap*: {token_info.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (initial_data and 'raw_market_cap' in initial_data and 
            initial_data['raw_market_cap'] and 'raw_market_cap' in token_info and token_info['raw_market_cap']):
            initial_mcap = initial_data['raw_market_cap']
            current_mcap = token_info['raw_market_cap']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
            if initial_mcap > 0:
                multiplier = current_mcap / initial_mcap
                
                # –ï—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –±–æ–ª—å—à–µ 2, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if multiplier >= 2:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 10, –∏–Ω–∞—á–µ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    mult_formatted = int(multiplier) if multiplier >= 10 else round(multiplier, 1)
                    message += f"üî• *–†–æ—Å—Ç: x{mult_formatted}* –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                    debug_logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ: x{mult_formatted}")
        
        message += f"‚è±Ô∏è *–í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞*: {token_info.get('token_age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        # –ë–ª–æ–∫ —Å –æ–±—ä–µ–º–∞–º–∏ —Ç–æ—Ä–≥–æ–≤
        volumes_block = ""
        if token_info.get('volume_5m', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            volumes_block += f"üìà *–û–±—ä–µ–º (5–º)*: {token_info['volume_5m']}\n"
            
        if token_info.get('volume_1h', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            volumes_block += f"üìà *–û–±—ä–µ–º (1—á)*: {token_info['volume_1h']}\n"
        
        if volumes_block:
            message += volumes_block + "\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
        ticker_address = token_info.get('ticker_address', '')
        pair_address = token_info.get('pair_address', '')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ GMGN
        gmgn_link = f"https://gmgn.ai/sol/token/{ticker_address}"
        
        # –ë–ª–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
        message += f"üîé *–°—Å—ã–ª–∫–∏*: [DexScreener]({token_info.get('dexscreener_link', '#')}) | [Axiom Trade]({token_info.get('axiom_link', '#')}) | [GMGN]({gmgn_link})\n\n"
        
        # –£–î–ê–õ–Ø–ï–ú –ë–õ–û–ö –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û DEX - —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        # # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DEX –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        # if 'dex_info' in token_info:
        #     dex_name = token_info['dex_info'].upper()
        #     message += f"DEX: {dex_name}\n\n"
        #     debug_logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DEX: {dex_name}")
        # 
        # # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PUMPFUN, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç–æ–ª—å–∫–æ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞)
        # if 'pumpfun_data' in token_info:
        #     message += f"DEX: *PUMPFUN*\n\n"
        #     
        #     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
        #     boosts = token_info['pumpfun_data'].get('boosts')
        #     if boosts:
        #         message += f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—É—Å—Ç–æ–≤: {boosts}\n\n"
        #     debug_logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PUMPFUN")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        message += f"_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}_"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if initial_data:
            if 'time' in initial_data:
                message += f"\n_–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {initial_data['time']}_"
            if 'market_cap' in initial_data:
                message += f"\n_–ù–∞—á–∞–ª—å–Ω—ã–π Market Cap: {initial_data['market_cap']}_"
        
        debug_logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return message
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        debug_logger.error(traceback.format_exc())
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return f"ü™ô *–¢–∏–∫–µ—Ä*: {token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\nüìù *–ê–¥—Ä–µ—Å*: `{token_info.get('ticker_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n\nüí∞ *Market Cap*: {token_info.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n_–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è_"

async def extract_token_address_from_message(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        import re
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "–ö–æ–Ω—Ç—Ä–∞–∫—Ç: " –∏–ª–∏ "Contract: "
        contract_pattern = r'(?:–ö–æ–Ω—Ç—Ä–∞–∫—Ç|Contract):\s*([a-zA-Z0-9]{32,44})'
        matches = re.search(contract_pattern, text)
        
        if matches:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—É —Å –∞–¥—Ä–µ—Å–æ–º
            return matches.group(1)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É –ö–æ–Ω—Ç—Ä–∞–∫—Ç:, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –∞–¥—Ä–µ—Å Solana
        # Solana –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (32-44 —Å–∏–º–≤–æ–ª–∞)
        solana_pattern = r'\b[a-zA-Z0-9]{32,44}\b'
        matches = re.search(solana_pattern, text)
        
        if matches:
            return matches.group(0)
            
        # –ò—â–µ–º Ethereum/BSC –∞–¥—Ä–µ—Å
        eth_pattern = r'0x[0-9a-fA-F]{40}'
        matches = re.search(eth_pattern, text)
        
        if matches:
            return matches.group(0)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ extract_token_address_from_message: {str(e)}")
        logger.error(traceback.format_exc())
        return ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not update.message:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.text:
        query = update.message.text.strip()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            token_address = await extract_token_address_from_message(query)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if token_address:
                query = token_address
                debug_logger.info(f"–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ: {query}")
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {query}")
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é try-except –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                # —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        msg = await update.message.reply_text(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ: {query}...")
                        debug_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ")
                        break  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
                    except (TimedOut, NetworkError) as e:
                        if attempt < max_retries - 1:
                            debug_logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ({attempt+1}/{max_retries}): {e}")
                            await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        else:
                            debug_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
                # –¢–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–∞—É—Ç–æ–≤
                result = None
                for attempt in range(max_retries):
                    try:
                        result = await get_token_info(query, update.message.chat_id, None, context)
                        debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç get_token_info: {'—É—Å–ø–µ—à–Ω–æ' if result else '–æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}")
                        break
                    except (TimedOut, NetworkError) as e:
                        if attempt < max_retries - 1:
                            debug_logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ({attempt+1}/{max_retries}): {e}")
                            await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        else:
                            debug_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                if 'msg' in locals():
                    try:
                        await msg.delete()
                        debug_logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —É–¥–∞–ª–µ–Ω–æ")
                    except Exception as e:
                        debug_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {str(e)}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
                if token_storage.check_auto_update_needed():
                    debug_logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Market Cap –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
                    context.application.create_task(check_all_market_caps(context))
                    
            except Exception as e:
                debug_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                debug_logger.error(traceback.format_exc())
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for attempt in range(max_retries):
                    try:
                        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        break
                    except Exception:
                        if attempt == max_retries - 1:
                            debug_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            debug_logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ handle_message: {str(e)}")
            debug_logger.error(traceback.format_exc())

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    debug_logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    debug_logger.error(traceback.format_exc())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback –∑–∞–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    
    if not query:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        data = query.data
        if not data:
            await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback
        if data.startswith("refresh:"):
            await handle_refresh_token(update, context)
        elif data == "refresh_list":
            await handle_refresh_list(update, context)
        elif data.startswith("list_page:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
            page = int(data.split(':', 1)[1])
            await handle_list_page(update, context, page)
        elif data == "generate_excel":
            await handle_generate_excel(update, context)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        elif data == "clear_all_confirm":
            await handle_clear_all_confirm(update, context)
        elif data == "clear_confirm":
            await handle_clear_confirm(update, context)
        elif data == "clear_cancel":
            await handle_clear_cancel(update, context)
        elif data.startswith("clear_selective"):
            await handle_clear_selective(update, context)
        elif data.startswith("hide_token:"):
            await handle_hide_token(update, context)
        elif data == "clear_return":
            await handle_clear_return(update, context)
        elif data == "manage_tokens":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
            await handle_clear_return(update, context)
        elif data == "manage_hidden":
            await handle_manage_hidden(update, context)
        elif data.startswith("manage_hidden:"):
            await handle_manage_hidden(update, context)
        elif data.startswith("unhide_token:"):
            await handle_unhide_token(update, context)
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        elif data == "unhide_all":
            await handle_unhide_all(update, context)
        elif data == "unhide_all_confirm":
            await handle_unhide_all_confirm(update, context)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        elif data == "delete_all_confirm":
            await handle_delete_all_confirm(update, context)
        elif data == "delete_confirm":
            await handle_delete_confirm(update, context)
        elif data.startswith("delete_selective"):
            await handle_delete_selective(update, context)
        elif data.startswith("delete_token:"):
            await handle_delete_token(update, context)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
            debug_logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback –∑–∞–ø—Ä–æ—Å–∞: {data}")
            
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass

async def handle_list_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await query.answer("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ
        active_tokens = token_storage.get_all_tokens(include_hidden=False)
        
        if not active_tokens:
            await query.edit_message_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.",
                parse_mode=ParseMode.MARKDOWN
            )
            debug_logger.info("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        tokens_per_page = 10  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ 10 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if total_pages > 1:
            if current_page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
            
            if current_page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º
        action_buttons = [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"list_page:{current_page}"),
            InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç", callback_data="generate_excel")
        ]
        keyboard.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
        keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            debug_logger.info(f"–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages})")
        except telegram.error.BadRequest as e:
            if "Message is too long" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                tokens_per_page = 5
                message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                nav_buttons = []
                
                if total_pages > 1:
                    if current_page > 0:
                        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
                    
                    if current_page < total_pages - 1:
                        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                keyboard.append(action_buttons)
                keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                debug_logger.info(f"–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}, —É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass

async def handle_refresh_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞."""
    query = update.callback_query
    data = query.data
    token_query = data.split(':', 1)[1]
    
    debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_query}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
        current_time = time.time()
        stored_data = token_storage.get_token_data(token_query)
        
        if stored_data:
            last_update_time = stored_data.get('last_update_time', 0)
            if current_time - last_update_time < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")
                debug_logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_query} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
                return
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            await query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            debug_logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {token_query} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await query.answer("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        debug_logger.info(f"–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_query}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        result = await get_token_info(
            token_query, 
            query.message.chat_id, 
            query.message.message_id, 
            context
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if stored_data and result:
            token_storage.update_token_field(token_query, 'last_update_time', current_time)
            debug_logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_query} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            debug_logger.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_query} –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if token_storage.check_auto_update_needed():
            debug_logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Market Cap –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
            context.application.create_task(check_all_market_caps(context))
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token_query}: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def on_startup(application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
        await setup_bot_commands(application)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ token_service
        from token_service import (
            monitor_token_market_caps, 
            send_token_stats  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        if not hasattr(application, 'job_queue') or application.job_queue is None:
            from telegram.ext import JobQueue
            application.job_queue = JobQueue()
            application.job_queue.set_application(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        application.job_queue.run_repeating(monitor_token_market_caps, interval=10, first=5)
        debug_logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        application.job_queue.run_repeating(send_token_stats, interval=14400, first=10)
        debug_logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # from datetime import time as dt_time
        # morning_time = dt_time(8, 0, 0)  # 08:00:00
        # application.job_queue.run_daily(send_token_stats, time=morning_time)
        # debug_logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ 08:00")
        #
        # vening_time = dt_time(20, 0, 0)  # 20:00:00
        # application.job_queue.run_daily(send_token_stats, time=evening_time)
        # debug_logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ 20:00")
        
        debug_logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤."""
    try:
        debug_logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        wait_message = await update.message.reply_text(
            "–§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from token_service import send_token_stats
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await send_token_stats(context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        try:
            await wait_message.delete()
        except Exception as e:
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")
        
        debug_logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

def configure_root_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    all_log_file = f'logs/all_components_{timestamp}.log'
    all_handler = logging.FileHandler(all_log_file, encoding='utf-8')
    all_handler.setLevel(logging.INFO)
    all_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    all_handler.setFormatter(all_formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    root_logger.addHandler(all_handler)
    root_logger.setLevel(logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    for module_name in ['asyncio', 'telethon', 'httpx', 'telegram', 'config']:
        module_logger = logging.getLogger(module_name)
        module_logger.setLevel(getattr(logging, 'INFO'))
    
    debug_logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    debug_logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ª–æ–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {all_log_file}")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."""
    debug_logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...")
    print("\n[INFO] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
     
def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        debug_logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞—á–∞—Ç")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        configure_root_logger()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        debug_logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("list", list_tokens))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("excel", excel_command))
        application.add_handler(CommandHandler("clear", clear_tokens))
        debug_logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        debug_logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        application.post_init = on_startup
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –Ω–∞–ø—Ä—è–º—É—é
        setup_commands_direct(TELEGRAM_TOKEN)
        debug_logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ - –°–ò–ù–•–†–û–ù–ù–´–ô –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
        debug_logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except Exception as e:
        debug_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        print("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ logs/debug.log")
# –≠—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
        print("–õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª logs/debug.log")
        debug_logger.info("=" * 50)
        debug_logger.info("–ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        debug_logger.info("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º requests –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏ –≤–µ—Ä—Å–∏–∏
        import requests
        debug_logger.info(f"–í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests: {requests.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        import sys
        debug_logger.info(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        required_modules = ["telegram", "token_storage", "utils", "token_service"]
        for module in required_modules:
            try:
                __import__(module)
                debug_logger.info(f"–ú–æ–¥—É–ª—å {module} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                debug_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module}: {str(e)}")
                print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module}")
                sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ asyncio.run()
        main()
    except Exception as e:
        debug_logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –±–ª–æ–∫–µ: {str(e)}")
        debug_logger.critical(traceback.format_exc())
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ logs/debug.log")