from telethon import TelegramClient, events
import asyncio
import logging
import sys
import re
import json
import os
import time
import signal
from datetime import datetime, timedelta
import pandas as pd  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç pandas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == 'win32':
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except AttributeError:
        # –î–ª—è Python 3.6, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ reconfigure
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
class UnicodeStreamHandler(logging.StreamHandler):
    def emit(self, record):
        try:
            msg = self.format(record)
            stream = self.stream
            stream.write(msg + self.terminator)
            self.flush()
        except UnicodeEncodeError:
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ '?'
            msg = self.format(record)
            try:
                stream = self.stream
                stream.write(msg.encode(stream.encoding, errors='replace').decode(stream.encoding) + self.terminator)
                self.flush()
            except (UnicodeError, IOError):
                self.handleError(record)
        except Exception:
            self.handleError(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_log.txt", encoding='utf-8'),  # –§–∞–π–ª —Å UTF-8
    ]
)
# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = UnicodeStreamHandler(sys.stdout)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger = logging.getLogger(__name__)
logger.addHandler(console_handler)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def safe_str(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if text is None:
        return "None"
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        return str(text[:100]).replace('\n', ' ') + "..."
    except:
        return "[–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã]"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import TELEGRAM_TOKEN, DEXSCREENER_API_URL, API_ID, API_HASH, TARGET_BOT

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ RadarDexBot
MIN_SIGNALS = 8  # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –º–∏–Ω–∏–º—É–º –≤ 7 –∫–∞–Ω–∞–ª–∞—Ö

# –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—à–µ–¥—à–∏—Ö Rule1
MOON_CRYPTO_MONKEY_CHANNEL = "MoonCryptoMonkey"

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–≥–æ–≤ –∏ —ç–º–æ–¥–∑–∏
TAG_EMOJI_MAP = {
    "snipeKOL": "üéØ",     # –¥–∞—Ä—Ç—Å
    "snipeGEM": "üíé",     # –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
    "TG_KOL": "üçÄ",       # –∫–ª–µ–≤–µ—Ä
    "EarlyGEM": "üíé",     # –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
    "EarlyKOL": "‚ö°",      # –º–æ–ª–Ω–∏—è
    "SmartMoney": "üíµ",   # –¥–æ–ª–ª–∞—Ä
    "Whale Bought": "üêã", # –∫–∏—Ç
    "Volume alert": "üöÄ", # —Ä–∞–∫–µ—Ç–∞
    "AlphAI_KOL": "üêÇ"    # –±—ã–∫
}

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (ID –∫–∞–Ω–∞–ª–∞ -> –∏–º—è)
SOURCE_CHANNELS = {
    2234923591: {"name": "@Tanjirocall", "tag": "TG_KOL"},
    1853203827: {"name": "@CryptoMafiaPlays", "tag": "TG_KOL"},
    2121262250: {"name": "@DoctoreDegens", "tag": "TG_KOL"},
    2010667852: {"name": "@SONIC_SPEED_CALLS", "tag": "TG_KOL"},
    1975976600: {"name": "@smartmaxidegens", "tag": "TG_KOL"},
    2055101998: {"name": "@metagambler", "tag": "TG_KOL"},
    1500214409: {"name": "@GemsmineEth", "tag": "TG_KOL"},
    1794471884: {"name": "@MineGems", "tag": "TG_KOL"},
    1603469217: {"name": "@ZionGems", "tag": "TG_KOL"},
    2366686880: {"name": "@Ranma_Calls_Solana", "tag": "snipeKOL"},
    1510769567: {"name": "@BatmanGamble", "tag": "TG_KOL"},
    1818702441: {"name": "@michiosuzukiofsatoshicalls", "tag": "TG_KOL"},
    1763265784: {"name": "@MarkDegens", "tag": "TG_KOL"},
    1983450418: {"name": "@shitcoinneverland", "tag": "TG_KOL"},
    2284638367: {"name": "@GemDynasty", "tag": "TG_KOL"},
    1554385364: {"name": "@SultanPlays", "tag": "TG_KOL"},
    1869537526: {"name": "@POSEIDON_DEGEN_CALLS", "tag": "TG_KOL"},
    1631609672: {"name": "@lowtaxcrypto", "tag": "TG_KOL"},
    2276696688: {"name": "@CrikeyCallz", "tag": "TG_KOL"},
    1851567457: {"name": "@Insider_ECA", "tag": "TG_KOL"},
    1756488143: {"name": "@lowtaxsolana", "tag": "TG_KOL"},
    1883929251: {"name": "@gogetagambles", "tag": "TG_KOL"},
    1711812162: {"name": "@Chadleycalls", "tag": "TG_KOL"},
    2362597228: {"name": "@Parkergamblles", "tag": "EarlyKOL"},
    2000078706: {"name": "@NIKOLA_CALLS", "tag": "TG_KOL"}, 
    2696740432: {"name": "@cringemonke2", "tag": "SmartMoney"},
    2051055592: {"name": "@Mrbigbagcalls", "tag": "TG_KOL"},
    2299508637: {"name": "@BaddiesAi", "tag": "TG_KOL"},
    1671616196: {"name": "@veigargambles", "tag": "TG_KOL"},
    2441888429: {"name": "@BasedchadsGamble", "tag": "TG_KOL"},
    1915368269: {"name": "@NFG_GAMBLES", "tag": "TG_KOL"},
    2514471362: {"name": "@cringemonke", "tag": "Whale Bought"},
    2144494116: {"name": "@GM_Degencalls", "tag": "TG_KOL"},
    2030684366: {"name": "@uranusX100", "tag": "TG_KOL"},
    1903316574: {"name": "@x666calls", "tag": "TG_KOL"},
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
    2441746747: {"name": "@DegenRaydiumSig", "tag": "TG_KOL"},
    2458682762: {"name": "@heracatusspread", "tag": "TG_KOL"},
    2497100790: {"name": "@DegenPumpfunSig", "tag": "TG_KOL"},
    2141713314: {"name": "@TheDegenBoysLounge", "tag": "TG_KOL"},
    1988420013: {"name": "@SAVANNAHCALLS", "tag": "TG_KOL"},
    2318939340: {"name": "@SolanaXpertWallet", "tag": "SmartMoney"},
    2352003756: {"name": "@SolanaWhalesMarket", "tag": "Whale Bought"},
     # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
    2531914184: {"name": "@astrasolcalls", "tag": "TG_KOL"},
    1159025019: {"name": "@TopWhaleCalls", "tag": "TG_KOL"},
    2420387755: {"name": "@degenhistory", "tag": "TG_KOL"},
    1758611100: {"name": "@mad_apes_gambles", "tag": "TG_KOL"},
    1695560898: {"name": "@feihuziben", "tag": "TG_KOL"},
    2536988241: {"name": "@AlphaONE_volumealerts", "tag": "Volume alert"},
    2534842510: {"name": "@AlphAI_signals_sol_en", "tag": "AlphAI_KOL"}
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
channel_names_cache = {}

# –§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'tokens_database.json'
TRACKER_DB_FILE = 'tokens_tracker_database.json'
TRACKER_EXCEL_FILE = 'tokens_tracker_database.xlsx'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤
tokens_db = {}
tracker_db = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ—Å—Ç–∏–≥—à–∏—Ö MIN_SIGNALS

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
async def get_channel_name_async(client, chat_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–∞–Ω–∞–ª–∞ –ø–æ ID, —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏ —Å–ª–æ–≤–∞—Ä—å
    str_id = str(chat_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '-100'
    if str_id.startswith('-100'):
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å ID –≤–∏–¥–∞ -1001234567890
        orig_id = chat_id
        stripped_id = int(str_id[4:])  # –£–¥–∞–ª—è–µ–º -100 –∏–∑ –Ω–∞—á–∞–ª–∞
    else:
        orig_id = chat_id
        stripped_id = chat_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –∫–∞–Ω–∞–ª–æ–≤
    if stripped_id in SOURCE_CHANNELS:
        channel_info = SOURCE_CHANNELS[stripped_id]
        if isinstance(channel_info, dict):
            return channel_info["name"]
        return channel_info
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    if str_id in channel_names_cache:
        return channel_names_cache[str_id]
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç Telegram API
    try:
        entity = await client.get_entity(orig_id)
        if hasattr(entity, 'username') and entity.username:
            name = f"@{entity.username}"
        elif hasattr(entity, 'title'):
            name = f"@{entity.title}"
        else:
            name = f"@channel_{abs(stripped_id)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        channel_names_cache[str_id] = name
        return name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
        return f"@channel_{abs(stripped_id)}"

def get_channel_name(chat_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '-100'
    if str(chat_id).startswith('-100'):
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å ID –≤–∏–¥–∞ -1001234567890
        stripped_id = int(str(chat_id)[4:])  # –£–¥–∞–ª—è–µ–º -100 –∏–∑ –Ω–∞—á–∞–ª–∞
    else:
        stripped_id = chat_id
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    channel_info = SOURCE_CHANNELS.get(stripped_id)
    if channel_info:
        if isinstance(channel_info, dict):
            return channel_info["name"]
        return channel_info
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ
        return f"@channel_{abs(stripped_id)}"

def get_channel_emojis_by_names(channel_names):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º."""
    emojis = ""
    for name in channel_names:
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏
        for chat_id, info in SOURCE_CHANNELS.items():
            if isinstance(info, dict) and info["name"] == name:
                tag = info["tag"]
                emoji = TAG_EMOJI_MAP.get(tag, "üçÄ")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                emojis += emoji
                break
            elif info == name:  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                emojis += "üçÄ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break
    
    return emojis

def extract_solana_contracts(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Solana –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text:
        return []
        
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Solana: –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ–±—ã—á–Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±—É–∫–≤ –∏ –∏–º–µ—é—Ç 32-44 —Å–∏–º–≤–æ–ª–∞
    pattern = r"\b[a-zA-Z0-9]{32,44}\b"
    potential_contracts = re.findall(pattern, text)
    
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    filtered_contracts = []
    for contract in potential_contracts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        contract_lower = contract.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if ('pump' in contract_lower or 
            'moon' in contract_lower or 
            'bonk' in contract_lower or
            re.match(r'^[0-9]', contract)):
            filtered_contracts.append(contract)
            continue
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:
        
        # 1. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if re.match(r'^[A-Z]', contract) and len(re.findall(r'[A-Z]', contract)) >= 3:
            # –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –∏–º–µ–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 3 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
            filtered_contracts.append(contract)
            continue
            
        # 2. –ò–º–µ–µ—Ç —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ (–º–∞–ª–µ–Ω—å–∫–∞—è-–±–æ–ª—å—à–∞—è –±—É–∫–≤–∞)
        if re.search(r'[a-z][A-Z][a-z]', contract) or re.search(r'[A-Z][a-z][A-Z]', contract):
            filtered_contracts.append(contract)
            continue
            
        # 3. –°–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä (–Ω–µ –º–µ–Ω–µ–µ 5) –∏ –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–Ω–µ –º–µ–Ω–µ–µ 5)
        digit_count = sum(c.isdigit() for c in contract)
        upper_count = sum(c.isupper() for c in contract)
        if digit_count >= 5 and upper_count >= 5:
            filtered_contracts.append(contract)
            continue
            
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if any(seq in contract for seq in ['Fg', 'Hc', 'Dk', 'CHL', 'GukM']):
            filtered_contracts.append(contract)
            continue
    
    return filtered_contracts

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_database():
    global tokens_db, tracker_db
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r', encoding='utf-8') as f:
                tokens_db = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tokens_db)} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            tokens_db = {}
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        if os.path.exists(TRACKER_DB_FILE):
            with open(TRACKER_DB_FILE, 'r', encoding='utf-8') as f:
                tracker_db = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tracker_db)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            update_tracker_with_emojis()
        else:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            tracker_db = {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        tokens_db = {}
        tracker_db = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_tracker_with_emojis():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ —Ç—Ä–µ–∫–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ 'emojis',
    –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤.
    """
    try:
        updates_count = 0
        for contract, data in tracker_db.items():
            # –ï—Å–ª–∏ –ø–æ–ª–µ emojis –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if 'emojis' not in data or not data['emojis']:
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                emojis = get_channel_emojis_by_names(data.get('channels', []))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞
                tracker_db[contract]['emojis'] = emojis
                updates_count += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —ç–º–æ–¥–∑–∏ '{emojis}' –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {contract}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º channel_count, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                channels = data.get('channels', [])
                if data.get('channel_count', 0) != len(channels):
                    tracker_db[contract]['channel_count'] = len(channels)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω channel_count –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {contract}: {len(channels)}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if updates_count > 0:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updates_count} —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–æ–¥–∑–∏")
            save_tracker_database()
            save_tracker_excel()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏ –≤ –±–∞–∑–µ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def save_database():
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(tokens_db, f, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tokens_db)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        save_tracker_database()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (JSON)
def save_tracker_database():
    try:
        with open(TRACKER_DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(tracker_db, f, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tracker_db)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ JSON –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ Excel
def save_tracker_excel():
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        excel_data = []
        for contract, data in tracker_db.items():
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            row = {
                'contract': contract,
                'first_seen': data.get('first_seen', ''),
                'signal_reached_time': data.get('signal_reached_time', ''),
                'channel_count': data.get('channel_count', 0),
                'channels': ', '.join(data.get('channels', [])),
                'emojis': data.get('emojis', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å —ç–º–æ–¥–∑–∏
                'Signals15': data.get('Signals15', 0),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ Signals15
                'Age': data.get('Age', 0),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ Age –≤ –º–∏–Ω—É—Ç–∞—Ö
                'Rule1_passed': data.get('Rule1_passed', False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è Rule1
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channel_times = data.get('channel_times', {})
            for channel, time in channel_times.items():
                row[f'time_{channel}'] = time
                
            excel_data.append(row)
            
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df = pd.DataFrame(excel_data)
        df.to_excel(TRACKER_EXCEL_FILE, index=False)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tracker_db)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ Excel –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Rule1
def analyze_token_for_rule1(contract, token_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ Rule1."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        first_seen_str = token_data.get('first_seen', '')
        signal_reached_time_str = token_data.get('signal_reached_time', '')
        
        if not first_seen_str or not signal_reached_time_str:
            logger.info(f"–¢–æ–∫–µ–Ω {contract}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Rule1")
            return False
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
        first_seen = datetime.strptime(first_seen_str, "%H:%M:%S")
        signal_reached = datetime.strptime(signal_reached_time_str, "%Y-%m-%d %H:%M:%S")
        
        # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ Age –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        first_seen_time = first_seen.time()
        signal_reached_time = signal_reached.time()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–∏
        first_seen_seconds = first_seen_time.hour * 3600 + first_seen_time.minute * 60 + first_seen_time.second
        signal_reached_seconds = signal_reached_time.hour * 3600 + signal_reached_time.minute * 60 + signal_reached_time.second
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ signal_reached < first_seen (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
        if signal_reached_seconds < first_seen_seconds:
            signal_reached_seconds += 24 * 3600  # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ç–∫–∏
        
        age_seconds = signal_reached_seconds - first_seen_seconds
        age_minutes = age_seconds / 60.0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ –≤—Ä–µ–º–µ–Ω–∞ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        channels = token_data.get('channels', [])
        channel_times = token_data.get('channel_times', {})
        
        # –°—á–∏—Ç–∞–µ–º Signals15
        signals15 = 0
        for channel in channels:
            if channel in channel_times:
                channel_time_str = channel_times[channel]
                channel_time = datetime.strptime(channel_time_str, "%H:%M:%S").time()
                channel_seconds = channel_time.hour * 3600 + channel_time.minute * 60 + channel_time.second
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                if channel_seconds < first_seen_seconds:
                    channel_seconds += 24 * 3600
                
                time_diff_seconds = channel_seconds - first_seen_seconds
                time_diff_minutes = time_diff_seconds / 60.0
                
                if time_diff_minutes <= 15:
                    signals15 += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        tracker_db[contract]['Signals15'] = signals15
        tracker_db[contract]['Age'] = age_minutes
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º Rule1
        rule1_passed = signals15 >= 8 and age_minutes <= 5
        tracker_db[contract]['Rule1_passed'] = rule1_passed
        
        logger.info(f"–¢–æ–∫–µ–Ω {contract}: Signals15={signals15}, Age={age_minutes:.2f} –º–∏–Ω—É—Ç, Rule1={rule1_passed}")
        
        return rule1_passed
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ {contract} –¥–ª—è Rule1: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
def add_to_tracker(contract, token_data, emojis):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω, –¥–æ—Å—Ç–∏–≥—à–∏–π MIN_SIGNALS, –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
        if contract in tracker_db:
            logger.info(f"–¢–æ–∫–µ–Ω {contract} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞
        tracker_data = {
            'contract': contract,
            'first_seen': token_data.get('first_seen', ''),
            'signal_reached_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'channel_count': token_data.get('channel_count', 0),
            'channels': token_data.get('channels', []),
            'channel_times': token_data.get('channel_times', {}),
            'emojis': emojis  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç—Ä–µ–∫–µ—Ä
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        tracker_db[contract] = tracker_data
        logger.info(f"–¢–æ–∫–µ–Ω {contract} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏: {emojis}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è Rule1 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        rule1_passed = analyze_token_for_rule1(contract, tracker_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        save_tracker_database()
        save_tracker_excel()
        
        return rule1_passed
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return False

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time_diff(first_seen_str, signal_reached_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º MIN_SIGNALS."""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        first_seen = datetime.strptime(first_seen_str, "%H:%M:%S")
        now = datetime.now()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏–∑ first_seen –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        first_datetime = datetime.combine(now.date(), first_seen.time())
        
        # –ï—Å–ª–∏ first_seen –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞
        if first_datetime > now:
            first_datetime = first_datetime - timedelta(days=1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        diff = now - first_datetime
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã
        days = diff.days
        seconds = diff.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if days > 0:
            return f"{days}d {hours}:{minutes:02d} h"
        elif hours > 0:
            return f"{hours}:{minutes:02d} h"
        else:
            return f"{minutes}:{seconds:02d} min"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "unknown time"

async def main():
    # –Ø–≤–Ω—ã–π –≤—ã–≤–æ–¥ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ bot_log.txt")
    logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    load_database()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    client = TelegramClient(
        'test_session', 
        API_ID, 
        API_HASH,
        connection_retries=10,
        retry_delay=5,
        auto_reconnect=True,
        request_retries=10
    )
    
    await client.start()
    
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await client.send_message(
            TARGET_BOT, 
            f"üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: {len(SOURCE_CHANNELS)}\n\n"
            f"‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: {MIN_SIGNALS}\n"
            f"üéØ Rule1 —Ñ–∏–ª—å—Ç—Ä –¥–ª—è {MOON_CRYPTO_MONKEY_CHANNEL}: Signals15 >= 10 –∏ Age <= 5 –º–∏–Ω—É—Ç"
        )
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç—É {TARGET_BOT}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    @client.on(events.NewMessage(chats=list(SOURCE_CHANNELS.keys())))
    async def handler(event):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
            channel_name = get_channel_name(event.chat_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name} (ID: {event.chat_id})")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = getattr(event.message, 'text', None)
            logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {safe_str(text)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã Solana –∏–∑ —Ç–µ–∫—Å—Ç–∞
            contracts = extract_solana_contracts(text)
            
            if contracts:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {contracts}")
                current_time = datetime.now().strftime("%H:%M:%S")
                
                for contract in contracts:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
                    if contract in tokens_db:
                        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        if channel_name not in tokens_db[contract]["channels"]:
                            tokens_db[contract]["channels"].append(channel_name)
                            tokens_db[contract]["channel_times"][channel_name] = current_time
                            tokens_db[contract]["channel_count"] += 1
                            
                            logger.info(f"–¢–æ–∫–µ–Ω {contract} –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {tokens_db[contract]['channel_count']}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                            emojis = get_channel_emojis_by_names(tokens_db[contract]["channels"])
                            tokens_db[contract]["emojis"] = emojis
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {contract}: {emojis}")
                            
                            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤ —Ç—Ä–µ–∫–µ—Ä–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–∞–º
                            if contract in tracker_db:
                                tracker_db[contract]["channels"] = tokens_db[contract]["channels"].copy()
                                tracker_db[contract]["channel_count"] = tokens_db[contract]["channel_count"]
                                tracker_db[contract]["channel_times"] = tokens_db[contract]["channel_times"].copy()
                                tracker_db[contract]["emojis"] = emojis
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {contract}: –∫–∞–Ω–∞–ª—ã={tokens_db[contract]['channel_count']}, —ç–º–æ–¥–∑–∏={emojis}")
                                
                                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Rule1 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                                rule1_passed = analyze_token_for_rule1(contract, tracker_db[contract])
                                save_tracker_database()
                                save_tracker_excel()
                            
                            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–±—Ä–∞–ª –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RadarDexBot
                            if tokens_db[contract]["channel_count"] >= MIN_SIGNALS and not tokens_db[contract]["message_sent"]:
                                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                                time_diff = format_time_diff(tokens_db[contract]["first_seen"], datetime.now())
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –≤ RadarDexBot (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
                                try:
                                    sent_message = await client.send_message(
                                        TARGET_BOT,
                                        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n{emojis} ({time_diff})"
                                    )
                                    tokens_db[contract]["message_sent"] = True
                                    tokens_db[contract]["message_id"] = sent_message.id
                                    logger.info(f"–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract} —Å —ç–º–æ–¥–∑–∏ {emojis} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É {TARGET_BOT}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.id}")
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Rule1
                                    rule1_passed = add_to_tracker(contract, tokens_db[contract], emojis)
                                    
                                    # –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª Rule1, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ MoonCryptoMonkey
                                    if rule1_passed:
                                        try:
                                            await client.send_message(
                                                MOON_CRYPTO_MONKEY_CHANNEL,
                                                f"üéØ Rule1 Passed\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n{emojis}\n\nSignals15: {tracker_db[contract]['Signals15']}\nAge: {tracker_db[contract]['Age']:.2f} –º–∏–Ω—É—Ç"
                                            )
                                            logger.info(f"–¢–æ–∫–µ–Ω {contract} –ø—Ä–æ—à–µ–ª Rule1 –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {MOON_CRYPTO_MONKEY_CHANNEL}")
                                        except Exception as e:
                                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {MOON_CRYPTO_MONKEY_CHANNEL}: {e}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            save_database()
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ç–æ–∫–µ–Ω–µ
                        tokens_db[contract] = {
                            "channels": [channel_name],
                            "channel_times": {channel_name: current_time},
                            "channel_count": 1,
                            "first_seen": current_time,
                            "message_sent": False,
                            "emojis": ""  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —ç–º–æ–¥–∑–∏
                        }
                        
                        logger.info(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω {contract} –¥–æ–±–∞–≤–ª–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ 1 –∏–∑ {MIN_SIGNALS} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ MIN_SIGNALS = 1)
                        if MIN_SIGNALS <= 1:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                            channel_info = SOURCE_CHANNELS.get(event.chat_id)
                            if isinstance(channel_info, dict) and "tag" in channel_info:
                                tag = channel_info["tag"]
                                emoji = TAG_EMOJI_MAP.get(tag, "üçÄ")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            else:
                                emoji = "üçÄ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –≤ RadarDexBot
                            try:
                                sent_message = await client.send_message(
                                    TARGET_BOT,
                                    f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n{emoji}"
                                )
                                tokens_db[contract]["message_sent"] = True
                                tokens_db[contract]["message_id"] = sent_message.id
                                tokens_db[contract]["emojis"] = emoji  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –±–∞–∑–µ
                                logger.info(f"–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract} —Å —ç–º–æ–¥–∑–∏ {emoji} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É {TARGET_BOT}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.id}")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Rule1
                                rule1_passed = add_to_tracker(contract, tokens_db[contract], emoji)
                                
                                # –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª Rule1, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ MoonCryptoMonkey
                                if rule1_passed:
                                    try:
                                        await client.send_message(
                                            MOON_CRYPTO_MONKEY_CHANNEL,
                                            f"üéØ Rule1 Passed\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n{emoji}\n\nSignals15: {tracker_db[contract]['Signals15']}\nAge: {tracker_db[contract]['Age']:.2f} –º–∏–Ω—É—Ç"
                                        )
                                        logger.info(f"–¢–æ–∫–µ–Ω {contract} –ø—Ä–æ—à–µ–ª Rule1 –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {MOON_CRYPTO_MONKEY_CHANNEL}")
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {MOON_CRYPTO_MONKEY_CHANNEL}: {e}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        save_database()
            else:
                logger.info("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã Solana –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async def periodic_save():
        while True:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                save_database()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    asyncio.ensure_future(periodic_save())
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: {len(SOURCE_CHANNELS)} —à—Ç. MIN_SIGNALS={MIN_SIGNALS}")
    logger.info(f"Rule1 —Ñ–∏–ª—å—Ç—Ä –¥–ª—è {MOON_CRYPTO_MONKEY_CHANNEL}: Signals15 >= 10 –∏ Age <= 5 –º–∏–Ω—É—Ç")
    
    # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        await client.run_until_disconnected()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        save_database()
        await client.disconnect()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")