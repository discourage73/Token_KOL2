import logging
import asyncio
import traceback
import telegram
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
import token_storage
from utils import format_tokens_list

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
debug_logger = logging.getLogger('debug')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    try:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ—Ç–æ–∫–µ–Ω–∞—Ö.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
            "/excel - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö"
        )
        debug_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        debug_logger.error(traceback.format_exc())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    try:
        await update.message.reply_text(
            "–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.\n"
            "–Ø —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ä–æ—Å—Ç Market Cap –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ (x2, x3, x4...).\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
            "/excel - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
            "/clear - —É–¥–∞–ª–∏—Ç—å/—É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏\n\n"
            "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
            "üéØ - –°–Ω–∞–π–ø–µ—Ä —Å –º–∏–≥—Ä–∞—Ü–∏–∏\n"
            "üíé - Gem –∫–∞–Ω–∞–ª\n"
            "üçÄ - KOL —Ç–µ–ª–µ–≥—Ä–∞–º\n"
            "‚ö° - Early mover\n"
            "üíµ - SmartMoney\n"
            "üêã - –ü–æ–∫—É–ø–∫–∞ –∫–∏—Ç–∞\n"
            "üöÄ - –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –æ–±—ä–µ–º–æ–≤\n"
            "üêÇ - –°–º–∞—Ä—ÇKOL"
        )
        debug_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        debug_logger.error(traceback.format_exc())

async def list_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –Ω–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        debug_logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∞—Ç–∞
        chat_id = update.message.chat_id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
        page = 0
        if context.args and len(context.args) > 0:
            try:
                page = int(context.args[0]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
                if page < 0:
                    page = 0
            except ValueError:
                page = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        prev_message_id = token_storage.get_list_message_id(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /list –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
        try:
            await update.message.delete()
            debug_logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /list —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            debug_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /list: {e}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if prev_message_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=prev_message_id)
                debug_logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–æ (ID: {prev_message_id})")
            except Exception as e:
                debug_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        wait_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        token_storage.store_list_message_id(chat_id, wait_message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ
        active_tokens = token_storage.get_all_tokens(include_hidden=False)
        
        if not active_tokens:
            await wait_message.edit_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."
            )
            debug_logger.info("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        tokens_per_page = 10  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ 10 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if total_pages > 1:
            if current_page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
            
            if current_page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º
        action_buttons = [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"list_page:{current_page}"),
            InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç", callback_data="generate_excel")
        ]
        keyboard.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
        keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            await wait_message.edit_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            debug_logger.info(f"–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages})")
        except telegram.error.BadRequest as e:
            if "Message is too long" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                tokens_per_page = 5
                message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                nav_buttons = []
                
                if total_pages > 1:
                    if current_page > 0:
                        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
                    
                    if current_page < total_pages - 1:
                        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                keyboard.append(action_buttons)
                keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await wait_message.edit_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                debug_logger.info(f"–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}, —É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await wait_message.edit_text(error_message)
                debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /list: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

async def excel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö."""
    try:
        debug_logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∞—Ç–∞
        chat_id = update.message.chat_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        wait_message = await update.message.reply_text(
            "–§–æ—Ä–º–∏—Ä—É—é Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        active_tokens = token_storage.get_all_tokens()
        
        if not active_tokens:
            await wait_message.edit_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞."
            )
            debug_logger.info("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç, Excel-—Ñ–∞–π–ª –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_excel –∏–∑ token_service
        from token_service import generate_excel
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
        await generate_excel(context, chat_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        await wait_message.delete()
        
        debug_logger.info(f"Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

async def handle_refresh_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        page = 0
        if ":" in query.data:
            _, page = query.data.split(":", 1)
            page = int(page)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await query.answer("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        token_storage.store_list_message_id(chat_id, query.message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–∞—Ö, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ
        active_tokens = token_storage.get_all_tokens(include_hidden=False)
        
        if not active_tokens:
            await query.edit_message_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.",
                parse_mode=ParseMode.MARKDOWN
            )
            debug_logger.info("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        tokens_per_page = 10  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ 10 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if total_pages > 1:
            if current_page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
            
            if current_page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º
        action_buttons = [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"list_page:{current_page}"),
            InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç", callback_data="generate_excel")
        ]
        keyboard.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
        keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            debug_logger.info(f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(active_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages})")
        except telegram.error.BadRequest as e:
            if "Message is too long" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                tokens_per_page = 5
                message, total_pages, current_page = format_tokens_list(active_tokens, page, tokens_per_page)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                nav_buttons = []
                
                if total_pages > 1:
                    if current_page > 0:
                        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"list_page:{current_page-1}"))
                    
                    if current_page < total_pages - 1:
                        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"list_page:{current_page+1}"))
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                keyboard.append(action_buttons)
                keyboard.append([InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="manage_tokens")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
                debug_logger.info(f"–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}, —É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass

async def handle_generate_excel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel-—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel-—Ñ–∞–π–ª...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        wait_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–§–æ—Ä–º–∏—Ä—É—é Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_excel –∏–∑ token_service
        from token_service import generate_excel
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
        await generate_excel(context, chat_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        await wait_message.delete()
        
        debug_logger.info(f"Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

async def clear_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ)."""
    try:
        debug_logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏, –≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ
        all_tokens = token_storage.get_all_tokens(include_hidden=True)
        tokens_count = len(all_tokens)
        
        if tokens_count == 0:
            await update.message.reply_text(
                "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        keyboard = [
            [InlineKeyboardButton("‚õî –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all_confirm")],
            [InlineKeyboardButton("üîç –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_selective")],
            [InlineKeyboardButton("üôà –°–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="clear_all_confirm")],
            [InlineKeyboardButton("üìã –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ", callback_data="clear_selective")],
            [InlineKeyboardButton("üïµÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏", callback_data="manage_hidden")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –≤–∏–¥–∏–º—ã—Ö –∏ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        visible_tokens_count = len(token_storage.get_all_tokens(include_hidden=False))
        hidden_tokens_count = len(token_storage.get_hidden_tokens())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {visible_tokens_count}, —Å–∫—Ä—ã—Ç—ã—Ö: {hidden_tokens_count}):\n\n"
            "‚õî *–£–¥–∞–ª–∏—Ç—å –≤—Å–µ* - —É–¥–∞–ª–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n"
            "üîç *–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ* - –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "üôà *–°–∫—Ä—ã—Ç—å –≤—Å–µ* - —Å–∫—Ä–æ–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã (–æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –±–∞–∑–µ).\n"
            "üìã *–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ* - –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.\n"
            "üïµÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏.\n"
            "‚ùå *–û—Ç–º–µ–Ω–∞* - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        debug_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {visible_tokens_count}, —Å–∫—Ä—ã—Ç—ã—Ö: {hidden_tokens_count})")
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /clear: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

async def handle_clear_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        debug_logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        tokens_count = len(token_storage.get_all_tokens(include_hidden=True))
        
        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        tokens = token_storage.get_all_tokens(include_hidden=True)
        for token_query in tokens:
            token_storage.hide_token(token_query)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚úÖ *–í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–∫—Ä—ã—Ç—ã ({tokens_count} —à—Ç.)*\n\n"
            "–û–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await query.answer("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç—ã")
        debug_logger.info(f"–°–∫—Ä—ã—Ç—ã –≤—Å–µ —Ç–æ–∫–µ–Ω—ã ({tokens_count} —à—Ç.)")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤.")
        except:
            pass

async def handle_clear_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        debug_logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è.")
        except:
            pass

async def handle_clear_all_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="clear_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_count = len(token_storage.get_all_tokens(include_hidden=True))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å *–≤—Å–µ* —Ç–æ–∫–µ–Ω—ã? ({tokens_count} —à—Ç.)\n\n"
            "–û–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        await query.answer()
        debug_logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ ({tokens_count} —à—Ç.)")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–∏—è: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_clear_selective(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    page = 0
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if ":" in query.data:
            _, page = query.data.split(":", 1)
            page = int(page)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã
        tokens = token_storage.get_all_tokens(include_hidden=False)
        
        if not tokens:
            await query.edit_message_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.",
                parse_mode=ParseMode.MARKDOWN
            )
            await query.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_list = list(tokens.items())
        tokens_count = len(tokens_list)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        tokens_per_page = 5
        total_pages = (tokens_count + tokens_per_page - 1) // tokens_per_page  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if page >= total_pages:
            page = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * tokens_per_page
        end_idx = min(start_idx + tokens_per_page, tokens_count)
        page_tokens = tokens_list[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
        keyboard = []
        
        for idx, (token_query, token_data) in enumerate(page_tokens, start=start_idx + 1):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if 'token_info' in token_data and 'ticker' in token_data['token_info']:
                ticker = token_data['token_info']['ticker']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            keyboard.append([
                InlineKeyboardButton(
                    f"{idx}. {ticker}",
                    callback_data=f"hide_token:{token_query}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        nav_buttons = []
        
        if total_pages > 1:
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            prev_page = (page - 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"clear_selective:{prev_page}"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            next_page = (page + 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"clear_selective:{next_page}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="clear_return")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
            "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã –∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ, "
            "–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        await query.answer()
        debug_logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–æ—á–Ω–æ–º —Å–∫—Ä—ã—Ç–∏–∏: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_hide_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    query = update.callback_query
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ callback_data
        _, token_query = query.data.split(":", 1)
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        success = token_storage.hide_token(token_query)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            token_data = token_storage.get_token_data(token_query)
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if token_data and 'token_info' in token_data and 'ticker' in token_data['token_info']:
                ticker = token_data['token_info']['ticker']
            
            await query.answer(f"–¢–æ–∫–µ–Ω {ticker} —Å–∫—Ä—ã—Ç")
            debug_logger.info(f"–¢–æ–∫–µ–Ω {token_query} ({ticker}) —Å–∫—Ä—ã—Ç")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            await handle_clear_selective(update, context)
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω")
            debug_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω {token_query}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç–æ–∫–µ–Ω–∞")
        except:
            pass

async def handle_manage_hidden(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏."""
    query = update.callback_query
    page = 0
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if ":" in query.data:
            _, page = query.data.split(":", 1)
            page = int(page)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã
        hidden_tokens = token_storage.get_hidden_tokens()
        
        if not hidden_tokens:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="clear_return")
                ]])
            )
            await query.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_list = list(hidden_tokens.items())
        tokens_count = len(tokens_list)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        tokens_per_page = 5
        total_pages = (tokens_count + tokens_per_page - 1) // tokens_per_page  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if page >= total_pages:
            page = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * tokens_per_page
        end_idx = min(start_idx + tokens_per_page, tokens_count)
        page_tokens = tokens_list[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
        keyboard = []
        
        for idx, (token_query, token_data) in enumerate(page_tokens, start=start_idx + 1):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if 'token_info' in token_data and 'ticker' in token_data['token_info']:
                ticker = token_data['token_info']['ticker']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            keyboard.append([
                InlineKeyboardButton(
                    f"{idx}. {ticker} (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)",
                    callback_data=f"unhide_token:{token_query}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        nav_buttons = []
        
        if total_pages > 1:
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            prev_page = (page - 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"manage_hidden:{prev_page}"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            next_page = (page + 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"manage_hidden:{next_page}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="clear_return")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"–°–∫—Ä—ã—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        await query.answer()
        debug_logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä—ã—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_unhide_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    query = update.callback_query
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ callback_data
        _, token_query = query.data.split(":", 1)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        success = token_storage.unhide_token(token_query)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            token_data = token_storage.get_token_data(token_query)
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if token_data and 'token_info' in token_data and 'ticker' in token_data['token_info']:
                ticker = token_data['token_info']['ticker']
            
            await query.answer(f"–¢–æ–∫–µ–Ω {ticker} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            debug_logger.info(f"–¢–æ–∫–µ–Ω {token_query} ({ticker}) –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            await handle_manage_hidden(update, context)
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
            debug_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω {token_query}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
        except:
            pass

async def handle_clear_return(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏."""
    query = update.callback_query
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚õî –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all_confirm")],
            [InlineKeyboardButton("üîç –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_selective")],
            [InlineKeyboardButton("üôà –°–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="clear_all_confirm")],
            [InlineKeyboardButton("üìã –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ", callback_data="clear_selective")],
            [InlineKeyboardButton("üïµÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏", callback_data="manage_hidden")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤
        visible_tokens_count = len(token_storage.get_all_tokens(include_hidden=False))
        hidden_tokens_count = len(token_storage.get_hidden_tokens())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {visible_tokens_count}, —Å–∫—Ä—ã—Ç—ã—Ö: {hidden_tokens_count}):\n\n"
            "‚õî *–£–¥–∞–ª–∏—Ç—å –≤—Å–µ* - —É–¥–∞–ª–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n"
            "üîç *–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ* - –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "üôà *–°–∫—Ä—ã—Ç—å –≤—Å–µ* - —Å–∫—Ä–æ–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã (–æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –±–∞–∑–µ).\n"
            "üìã *–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ* - –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.\n"
            "üïµÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏.\n"
            "‚ùå *–û—Ç–º–µ–Ω–∞* - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        await query.answer()
        debug_logger.info("–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        debug_logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        tokens_count = len(token_storage.get_all_tokens(include_hidden=True))
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        deleted_count = token_storage.delete_all_tokens()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚úÖ *–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã ({deleted_count} —à—Ç.)*\n\n"
            "–û–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await query.answer("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        debug_logger.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–æ–∫–µ–Ω—ã ({deleted_count} —à—Ç.)")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.")
        except:
            pass

async def handle_delete_all_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_count = len(token_storage.get_all_tokens(include_hidden=True))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å *–≤—Å–µ* —Ç–æ–∫–µ–Ω—ã? ({tokens_count} —à—Ç.)\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        await query.answer()
        debug_logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ ({tokens_count} —à—Ç.)")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_delete_selective(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤."""
    query = update.callback_query
    page = 0
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if ":" in query.data:
            _, page = query.data.split(":", 1)
            page = int(page)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
        tokens = token_storage.get_all_tokens(include_hidden=True)
        
        if not tokens:
            await query.edit_message_text(
                "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode=ParseMode.MARKDOWN
            )
            await query.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_list = list(tokens.items())
        tokens_count = len(tokens_list)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        tokens_per_page = 5
        total_pages = (tokens_count + tokens_per_page - 1) // tokens_per_page  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if page >= total_pages:
            page = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * tokens_per_page
        end_idx = min(start_idx + tokens_per_page, tokens_count)
        page_tokens = tokens_list[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
        keyboard = []
        
        for idx, (token_query, token_data) in enumerate(page_tokens, start=start_idx + 1):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if 'token_info' in token_data and 'ticker' in token_data['token_info']:
                ticker = token_data['token_info']['ticker']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ (—Å–∫—Ä—ã—Ç—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
            status = " (—Å–∫—Ä—ã—Ç)" if token_data.get('hidden', False) else ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            keyboard.append([
                InlineKeyboardButton(
                    f"{idx}. {ticker}{status}",
                    callback_data=f"delete_token:{token_query}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        nav_buttons = []
        
        if total_pages > 1:
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            prev_page = (page - 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"delete_selective:{prev_page}"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            next_page = (page + 1) % total_pages
            nav_buttons.append(InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"delete_selective:{next_page}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="clear_return")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
            "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        await query.answer()
        debug_logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–æ—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def handle_delete_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    query = update.callback_query
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ callback_data
        _, token_query = query.data.split(":", 1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        token_data = token_storage.get_token_data(token_query)
        ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if token_data and 'token_info' in token_data and 'ticker' in token_data['token_info']:
            ticker = token_data['token_info']['ticker']
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        success = token_storage.delete_token(token_query)
        
        if success:
            await query.answer(f"–¢–æ–∫–µ–Ω {ticker} —É–¥–∞–ª–µ–Ω")
            debug_logger.info(f"–¢–æ–∫–µ–Ω {token_query} ({ticker}) —É–¥–∞–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É
            remaining_tokens = token_storage.get_all_tokens(include_hidden=True)
            if not remaining_tokens:
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
                await query.edit_message_text(
                    "–í—Å–µ —Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            await handle_delete_selective(update, context)
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω")
            debug_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω {token_query}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
        except:
            pass

async def setup_bot_commands(application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏."""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É excel
        commands = [
            BotCommand("start", "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            BotCommand("list", "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"),
            BotCommand("excel", "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏"),
            BotCommand("clear", "—É–¥–∞–ª–∏—Ç—å/—É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏")
        ]
        
        await application.bot.set_my_commands(commands)
        debug_logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {str(e)}")
        debug_logger.error(traceback.format_exc())

def setup_commands_direct(token):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HTTP API."""
    try:
        import requests
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É excel
        commands = [
            {"command": "start", "description": "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
            {"command": "help", "description": "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
            {"command": "list", "description": "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"},
            {"command": "excel", "description": "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏"},
            {"command": "clear", "description": "—É–¥–∞–ª–∏—Ç—å/—É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏"}
        ]
        
        url = f"https://api.telegram.org/bot{token}/setMyCommands"
        response = requests.post(url, json={"commands": commands})
        
        if response.status_code == 200 and response.json().get("ok"):
            debug_logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API")
        else:
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API: {response.text}")
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API: {str(e)}")
        debug_logger.error(traceback.format_exc())