import requests
import logging
import datetime
import time
import asyncio
import random
import json
import os
import pandas as pd
from typing import Dict, Any, Optional, Union, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from telegram.error import TimedOut, NetworkError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
import token_storage
from config import DEXSCREENER_API_URL, logger
from utils import process_token_data, format_message, format_number, format_growth_message

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API
API_REQUEST_LIMIT = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
API_COOLDOWN_TIME = 70  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
api_request_count = 0
last_api_request_time = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITOR_INTERVAL = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def get_token_info(
    query: str, 
    chat_id: int, 
    message_id: Optional[int] = None, 
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {query}")
        
        response = requests.get(f"{DEXSCREENER_API_URL}?q={query}", timeout=20)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            pairs = data.get('pairs', [])
            
            if not pairs:
                if context and chat_id:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ '{query}'."
                    )
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
            token_data = pairs[0]
            raw_api_data = token_data
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            token_info = process_token_data(token_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            initial_data = None
            send_growth_notification = False
            current_multiplier = 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            stored_data = token_storage.get_token_data(query)
            
            if stored_data:
                initial_data = stored_data.get('initial_data')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (initial_data and 'raw_market_cap' in initial_data and 
                    initial_data['raw_market_cap'] and token_info['raw_market_cap']):
                    initial_mcap = initial_data['raw_market_cap']
                    current_mcap = token_info['raw_market_cap']
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    if initial_mcap > 0:
                        multiplier = current_mcap / initial_mcap
                        current_multiplier = int(multiplier)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                        last_alert_multiplier = stored_data.get('last_alert_multiplier', 1)
                        
                        logger.info(f"–¢–æ–∫–µ–Ω {query}: —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {multiplier}, —Ü–µ–ª—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {current_multiplier}")
                        
                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å >= 2 –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç
                        if current_multiplier >= 2 and current_multiplier > last_alert_multiplier:
                            send_growth_notification = True
                            logger.info(f"–¢–†–ò–ì–ì–ï–† –ê–õ–ï–†–¢–ê: –¢–æ–∫–µ–Ω {query} –¥–æ—Å—Ç–∏–≥ –º–Ω–æ–∂–∏—Ç–µ–ª—è x{current_multiplier}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                current_time = datetime.datetime.now().strftime("%H:%M:%S")
                initial_data = {
                    'time': current_time,
                    'market_cap': token_info['market_cap'],
                    'raw_market_cap': token_info['raw_market_cap']
                }
                logger.info(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω {query} –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–∞—á–∞–ª—å–Ω—ã–º Market Cap: {token_info['market_cap']}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = format_message(token_info, initial_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{query}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å context –∏ chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if context and chat_id:
                # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                if message_id:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                    except Exception as e:
                        if "Message is not modified" not in str(e):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                else:
                    try:
                        sent_msg = await context.bot.send_message(
                            chat_id=chat_id,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        token_data_to_store = {
                            'last_update_time': time.time(),
                            'message_id': sent_msg.message_id,
                            'chat_id': sent_msg.chat_id,
                            'initial_data': initial_data,
                            'token_info': token_info,
                            'last_alert_multiplier': 1,
                            'added_time': time.time(),
                            'raw_api_data': raw_api_data
                        }
                        
                        token_storage.store_token_data(query, token_data_to_store)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if send_growth_notification:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ
                        growth_message = format_growth_message(token_info['ticker'], current_multiplier, token_info['market_cap'])
                        
                        sent = await context.bot.send_message(
                            chat_id=chat_id,
                            text=growth_message,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True,
                            reply_to_message_id=message_id
                        )
                        
                        if sent:
                            token_storage.update_token_field(query, 'last_alert_multiplier', current_multiplier)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ: {e}")
            
            return token_info
        
        else:
            if context and chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ö–æ–¥: {response.status_code}."
                )
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ: {e}")
        if context and chat_id:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            )
        return None

async def process_token_address(address: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {address}")
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {address}\n–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ..."
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º —Ç–æ–∫–µ–Ω–µ
        stored_data = token_storage.get_token_data(address)
        
        if stored_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id = stored_data.get('message_id')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_token_info –∏–∑ test_bot4.py –≤–º–µ—Å—Ç–æ original_get_token_info
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from test_bot4 import get_token_info as enhanced_get_token_info
            result = await enhanced_get_token_info(address, chat_id, message_id, context)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ {address}: {'—É—Å–ø–µ—à–Ω–æ' if result else '–Ω–µ —É–¥–∞–ª–æ—Å—å'}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            from test_bot4 import get_token_info as enhanced_get_token_info
            result = await enhanced_get_token_info(address, chat_id, None, context)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ {address}: {'—É—Å–ø–µ—à–Ω–æ' if result else '–Ω–µ —É–¥–∞–ª–æ—Å—å'}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        try:
            await msg.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {address}: {str(e)}"
            )
        except:
            pass

async def monitor_token_market_caps(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–∞—Ä–∫–µ—Ç –∫–∞–ø —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã x2, x3 –∏ —Ç.–¥.
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á.
    –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞: MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥ (10 —Å–µ–∫.)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        active_tokens = token_storage.get_active_tokens()
        
        if not active_tokens:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞")
            return
            
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞, –≤—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(active_tokens)}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç –∫–∞–ø –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç
        for query, token_data in active_tokens.items():
            try:
                chat_id = token_data.get('chat_id')
                message_id = token_data.get('message_id')
                
                if not chat_id:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                last_update_time = token_data.get('last_update_time', 0)
                current_time = time.time()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
                if current_time - last_update_time < 5:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ
                result = await check_market_cap_growth(query, chat_id, message_id, context)
                
                if result:
                    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ {query}: MC={result.get('market_cap')}, Multiplier={result.get('multiplier', 1)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    send_notification = result.get('send_notification', False)
                    current_multiplier = result.get('current_multiplier', 1)
                    
                    if send_notification and current_multiplier >= 2:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ
                        token_info = token_data.get('token_info', {})
                        ticker = token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        market_cap = result.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ
                        growth_message = format_growth_message(ticker, current_multiplier, market_cap)
                        
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=growth_message,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True,
                            reply_to_message_id=message_id
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç
                        token_storage.update_token_field(query, 'last_alert_multiplier', current_multiplier)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞ {ticker} –¥–æ x{current_multiplier}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
                await asyncio.sleep(random.uniform(0.5, 1.0))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
                continue
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def check_all_market_caps(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Market Cap –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
    –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ.
    """
    logger.info("–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Market Cap –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    token_storage.update_last_auto_check_time()
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    expired_tokens = token_storage.clean_expired_tokens()
    if expired_tokens:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_tokens)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    all_tokens = token_storage.get_all_tokens()
    
    for query, token_data in all_tokens.items():
        try:
            chat_id = token_data.get('chat_id')
            message_id = token_data.get('message_id')
            
            if not chat_id:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {query}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç –∫–∞–ø –∏ —Ä–æ—Å—Ç —Ç–æ–∫–µ–Ω–∞
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Market Cap —Ç–æ–∫–µ–Ω–∞ {query}")
            result = await check_market_cap_growth(query, chat_id, message_id, context)
            
            if result:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ
                send_notification = result.get('send_notification', False)
                current_multiplier = result.get('current_multiplier', 1)
                
                if send_notification and current_multiplier >= 2:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ
                    token_info = token_data.get('token_info', {})
                    ticker = token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    market_cap = result.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ
                    growth_message = format_growth_message(ticker, current_multiplier, market_cap)
                    
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=growth_message,
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True,
                        reply_to_message_id=message_id
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç
                    token_storage.update_token_field(query, 'last_alert_multiplier', current_multiplier)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞ {ticker} –¥–æ x{current_multiplier}")
                
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result['market_cap']}")
            else:
                logger.warning(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query} –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
            await asyncio.sleep(random.uniform(0.5, 1.0))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
            await asyncio.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def check_market_cap_growth(
    query: str,
    chat_id: int,
    message_id: Optional[int] = None,
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ä–∫–µ—Ç –∫–∞–ø —Ç–æ–∫–µ–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –æ–Ω –Ω–æ–≤–æ–≥–æ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ –∏ —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        stored_data = token_storage.get_token_data(query)
        if not stored_data:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {query} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Å—Ç–∞")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 2  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        response = None
        
        for attempt in range(max_retries):
            try:
                response = requests.get(f"{DEXSCREENER_API_URL}?q={query}", timeout=7)  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                break
            except (requests.exceptions.Timeout, requests.exceptions.ConnectionError) as e:
                if attempt < max_retries - 1:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({attempt+1}/{max_retries}): {e}")
                    await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    return None
        
        if not response:
            return None
        
        if response.status_code == 200:
            data = response.json()
            pairs = data.get('pairs', [])
            
            if not pairs:
                logger.warning(f"API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∞—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            token_data = pairs[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º market cap
            market_cap = token_data.get('fdv')
            raw_market_cap = market_cap  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            market_cap_formatted = format_number(market_cap)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ market_cap –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if 'token_info' in stored_data:
                stored_data['token_info']['market_cap'] = market_cap_formatted
                stored_data['token_info']['raw_market_cap'] = raw_market_cap
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                stored_data['last_update_time'] = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                token_storage.store_token_data(query, stored_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ATH, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
                if raw_market_cap:
                    token_storage.update_token_ath(query, raw_market_cap)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Ä–æ—Å—Ç–∞
                send_notification = False
                current_multiplier = 1
                
                initial_data = stored_data.get('initial_data', {})
                initial_mcap = initial_data.get('raw_market_cap', 0)
                
                if initial_mcap and initial_mcap > 0 and raw_market_cap:
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    multiplier = raw_market_cap / initial_mcap
                    current_multiplier = int(multiplier)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                    last_alert_multiplier = stored_data.get('last_alert_multiplier', 1)
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å >= 2 –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç
                    if current_multiplier >= 2 and current_multiplier > last_alert_multiplier:
                        send_notification = True
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: x{current_multiplier} (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: x{last_alert_multiplier})")
                
                return {
                    'market_cap': market_cap_formatted, 
                    'raw_market_cap': raw_market_cap,
                    'multiplier': multiplier if 'multiplier' in locals() else 1,
                    'current_multiplier': current_multiplier,
                    'send_notification': send_notification
                }
            else:
                logger.warning(f"–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç –ø–æ–ª—è token_info –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                return None
        else:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {response.status_code} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ—Å—Ç–∞ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
        return None

async def send_token_stats(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    try:
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("=== –ù–ê–ß–ê–õ–û –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–û–ö–ï–ù–ê–ú ===")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        all_tokens = token_storage.get_all_tokens(include_hidden=True)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_tokens)}")
        
        if not all_tokens:
            logger.info("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = time.time()
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –í—Ä–µ–º—è 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        time_12h_ago = current_time - (12 * 60 * 60)
        logger.info(f"–í—Ä–µ–º—è 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥: {datetime.datetime.fromtimestamp(time_12h_ago).strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tokens = 0
        tokens_1_5x = 0
        tokens_2x = 0
        tokens_5x = 0
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        analyzed_tokens = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
        for query, data in all_tokens.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 —á–∞—Å–æ–≤
            added_time = data.get('added_time', 0)
            
            if not added_time:
                logger.info(f"–¢–æ–∫–µ–Ω {query} –Ω–µ –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            token_added_time = datetime.datetime.fromtimestamp(added_time).strftime('%Y-%m-%d %H:%M:%S')
            logger.info(f"–¢–æ–∫–µ–Ω {query} –¥–æ–±–∞–≤–ª–µ–Ω: {token_added_time}")
            
            if added_time < time_12h_ago:
                logger.info(f"–¢–æ–∫–µ–Ω {query} –¥–æ–±–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç –∫–∞–ø
            initial_mcap = 0
            if 'initial_data' in data and 'raw_market_cap' in data['initial_data']:
                initial_mcap = data['initial_data'].get('raw_market_cap', 0)
            
            # –ë–µ—Ä–µ–º ATH –º–∞—Ä–∫–µ—Ç –∫–∞–ø –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ
            ath_market_cap = data.get('ath_market_cap', 0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç–∫–∞–ø—ã
            logger.info(f"–¢–æ–∫–µ–Ω {query} - Initial mcap: {initial_mcap}, ATH mcap: {ath_market_cap}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ
            if not initial_mcap or not ath_market_cap:
                logger.info(f"–¢–æ–∫–µ–Ω {query} –Ω–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∫–µ—Ç–∫–∞–ø–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATH
            multiplier = ath_market_cap / initial_mcap if initial_mcap > 0 else 0
            logger.info(f"–¢–æ–∫–µ–Ω {query} - –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier:.2f}x")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            total_tokens += 1
            
            if multiplier >= 5:
                tokens_5x += 1
            elif multiplier >= 2:
                tokens_2x += 1
            elif multiplier >= 1.5:
                tokens_1_5x += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            ticker = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if 'token_info' in data and 'ticker' in data['token_info']:
                ticker = data['token_info']['ticker']
                
            analyzed_tokens.append({
                'query': query,
                'ticker': ticker,
                'added_time': token_added_time,
                'initial_mcap': initial_mcap,
                'ath_mcap': ath_market_cap,
                'multiplier': multiplier
            })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤: {total_tokens}")
        logger.info(f"–¢–æ–∫–µ–Ω–æ–≤ —Å —Ä–æ—Å—Ç–æ–º –æ—Ç 1.5x –¥–æ <2x: {tokens_1_5x}")
        logger.info(f"–¢–æ–∫–µ–Ω–æ–≤ —Å —Ä–æ—Å—Ç–æ–º –æ—Ç 2x –¥–æ <5x: {tokens_2x}")
        logger.info(f"–¢–æ–∫–µ–Ω–æ–≤ —Å —Ä–æ—Å—Ç–æ–º ‚â•5x: {tokens_5x}")
        
        for token in analyzed_tokens:
            logger.info(f"–¢–æ–∫–µ–Ω {token['ticker']} ({token['query']}): –¥–æ–±–∞–≤–ª–µ–Ω {token['added_time']}, –º–Ω–æ–∂–∏—Ç–µ–ª—å {token['multiplier']:.2f}x")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if total_tokens > 0:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (>=1.5x)
            successful_tokens = tokens_1_5x + tokens_2x + tokens_5x
            hitrate_percent = (successful_tokens / total_tokens) * 100 if total_tokens > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞
            hitrate_symbol = "üî¥"  # <30%
            if hitrate_percent >= 70:
                hitrate_symbol = "üü£"  # >=70%
            elif hitrate_percent >= 50:
                hitrate_symbol = "üü¢"  # >=50%
            elif hitrate_percent >= 30:
                hitrate_symbol = "üü°"  # >=30%
            
            message = (
                f"Token stats for the last 12 hours:\n"
                f"> Total tokens: {total_tokens}\n"
                f"‚îú 1.5x-2x: {tokens_1_5x}\n"
                f"‚îú 2x-5x: {tokens_2x}\n"
                f"‚îî ‚â•5x: {tokens_5x}\n\n"
                f"Hitrate: {hitrate_percent:.1f}% {hitrate_symbol} (1.5x+)"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ë–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id –∏–∑ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            chat_ids = set()
            for query, data in all_tokens.items():
                chat_id = data.get('chat_id')
                if chat_id:
                    chat_ids.add(chat_id)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(chat_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {chat_ids}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç chat_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
            if not chat_ids:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                logger.info("–ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ chat_id –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
                
                for query, data in all_tokens.items():
                    if not data.get('hidden', False):
                        message_id = data.get('message_id', 0)
                        chat_id = data.get('chat_id', 0)
                        
                        if chat_id:
                            chat_ids.add(chat_id)
                            logger.info(f"–ù–∞–π–¥–µ–Ω chat_id {chat_id} –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {query}")
            
            # –ï—Å–ª–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ—Ç chat_id, –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if not chat_ids:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
            success_count = 0
            for chat_id in chat_ids:
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç {chat_id}...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=message
                            )
                            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
                            success_count += 1
                            break
                        except (TimedOut, NetworkError) as e:
                            if attempt < max_retries - 1:
                                logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç {chat_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
                                await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            else:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∞—Ç {chat_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    import traceback
                    logger.error(traceback.format_exc())
            
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {success_count} –∏–∑ {len(chat_ids)} —á–∞—Ç–æ–≤")
        else:
            logger.info("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        logger.info("=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–û–ö–ï–ù–ê–ú ===")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def check_market_cap_only(
    query: str,
    chat_id: int,
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ Market Cap —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        stored_data = token_storage.get_token_data(query)
        if not stored_data:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {query} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Market Cap")
            return None
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞
        max_retries = 3
        response = None
        
        for attempt in range(max_retries):
            try:
                response = requests.get(f"{DEXSCREENER_API_URL}?q={query}", timeout=10)
                break
            except (requests.exceptions.Timeout, requests.exceptions.ConnectionError) as e:
                if attempt < max_retries - 1:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({attempt+1}/{max_retries}): {e}")
                    await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    return None
        
        if not response:
            return None
        
        if response.status_code == 200:
            data = response.json()
            pairs = data.get('pairs', [])
            
            if not pairs:
                logger.warning(f"API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∞—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            token_data = pairs[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º market cap
            market_cap = token_data.get('fdv')
            raw_market_cap = market_cap  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            market_cap_formatted = format_number(market_cap)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ market_cap –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if 'token_info' in stored_data:
                stored_data['token_info']['market_cap'] = market_cap_formatted
                stored_data['token_info']['raw_market_cap'] = raw_market_cap
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                token_storage.store_token_data(query, stored_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ATH, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
                if raw_market_cap:
                    token_storage.update_token_ath(query, raw_market_cap)
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {market_cap_formatted}")
                
                return {'market_cap': market_cap_formatted, 'raw_market_cap': raw_market_cap}
            else:
                logger.warning(f"–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç –ø–æ–ª—è token_info –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                return None
        else:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {response.status_code} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
        return None

async def generate_excel(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        active_tokens = token_storage.get_active_tokens()
        
        if not active_tokens:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞."
            )
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        tokens_data = []
        
        for query, token_data in active_tokens.items():
            try:
                token_info = token_data.get('token_info', {})
                initial_data = token_data.get('initial_data', {})
                ath_market_cap = token_data.get('ath_market_cap', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                ticker = token_info.get('ticker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                ticker_address = token_info.get('ticker_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞—Ö
                current_market_cap = token_info.get('raw_market_cap', 0)
                initial_market_cap = initial_data.get('raw_market_cap', 0)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º ATH / initial
                multiplier = 1.0
                if initial_market_cap and ath_market_cap and isinstance(initial_market_cap, (int, float)) and isinstance(ath_market_cap, (int, float)) and initial_market_cap > 0:
                    multiplier = round(ath_market_cap / initial_market_cap, 2)
                
                # –î–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞
                token_age = token_info.get('token_age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                added_time = datetime.datetime.fromtimestamp(token_data.get('added_time', 0)).strftime('%Y-%m-%d %H:%M:%S')
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ATH
                ath_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if 'ath_time' in token_data:
                    ath_timestamp = token_data.get('ath_time', 0)
                    if ath_timestamp:
                        ath_time = datetime.datetime.fromtimestamp(ath_timestamp).strftime('%Y-%m-%d %H:%M:%S')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DEX
                dex_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if 'dex_info' in token_info:
                    dex_info = token_info.get('dex_info', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–¥–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                txns_data_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                if 'txns_trend' in token_info:
                    txns_trend = token_info.get('txns_trend', {})
                    txns_str_parts = []
                    
                    # m5
                    m5_buys = txns_trend.get('m5_buys', 0)
                    m5_sells = txns_trend.get('m5_sells', 0)
                    if m5_buys > 0 or m5_sells > 0:
                        txns_str_parts.append(f"m5: {m5_buys}/{m5_sells}")
                    
                    # h1
                    h1_buys = txns_trend.get('h1_buys', 0)
                    h1_sells = txns_trend.get('h1_sells', 0)
                    if h1_buys > 0 or h1_sells > 0:
                        txns_str_parts.append(f"h1: {h1_buys}/{h1_sells}")
                    
                    # h24
                    h24_buys = txns_trend.get('h24_buys', 0)
                    h24_sells = txns_trend.get('h24_sells', 0)
                    if h24_buys > 0 or h24_sells > 0:
                        txns_str_parts.append(f"h24: {h24_buys}/{h24_sells}")
                    
                    if txns_str_parts:
                        txns_data_str = ", ".join(txns_str_parts)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PumpFun
                pumpfun_data_str = "–ù–µ—Ç"
                has_boosts = "–ù–µ—Ç"
                if 'pumpfun_data' in token_info:
                    pumpfun_data = token_info.get('pumpfun_data', {})
                    if pumpfun_data:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º txns
                        pumpfun_txns = pumpfun_data.get('txns', {})
                        txns_str_parts = []
                        
                        # m5
                        m5 = pumpfun_txns.get('m5', {})
                        if m5:
                            txns_str_parts.append(f"m5: {m5.get('buys', 0)}/{m5.get('sells', 0)}")
                        
                        # h1
                        h1 = pumpfun_txns.get('h1', {})
                        if h1:
                            txns_str_parts.append(f"h1: {h1.get('buys', 0)}/{h1.get('sells', 0)}")
                        
                        # h6
                        h6 = pumpfun_txns.get('h6', {})
                        if h6:
                            txns_str_parts.append(f"h6: {h6.get('buys', 0)}/{h6.get('sells', 0)}")
                        
                        # h24
                        h24 = pumpfun_txns.get('h24', {})
                        if h24:
                            txns_str_parts.append(f"h24: {h24.get('buys', 0)}/{h24.get('sells', 0)}")
                        
                        pumpfun_data_str = ", ".join(txns_str_parts)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É—Å—Ç–æ–≤
                        boosts = pumpfun_data.get('boosts')
                        if boosts:
                            has_boosts = "–î–∞"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç –∫–∞–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                current_market_cap_formatted = format_number(current_market_cap) if isinstance(current_market_cap, (int, float)) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                initial_market_cap_formatted = format_number(initial_market_cap) if isinstance(initial_market_cap, (int, float)) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                ath_market_cap_formatted = format_number(ath_market_cap) if isinstance(ath_market_cap, (int, float)) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                channel_count = 0
                channels = []
                first_seen = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                signal_reached_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    TRACKER_DB_FILE = 'tokens_tracker_database.json'
                    if os.path.exists(TRACKER_DB_FILE):
                        with open(TRACKER_DB_FILE, 'r', encoding='utf-8') as f:
                            tracker_data = json.load(f)
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –≤ –±–∞–∑–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        if query in tracker_data:
                            token_tracker_data = tracker_data[query]
                            channel_count = token_tracker_data.get('channel_count', 0)
                            channels = token_tracker_data.get('channels', [])
                            first_seen = token_tracker_data.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            signal_reached_time = token_tracker_data.get('signal_reached_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –∞–¥—Ä–µ—Å –≤ –∫–ª—é—á–∞—Ö
                            for tracker_query, tracker_data_item in tracker_data.items():
                                if query in tracker_query or tracker_query in query:
                                    channel_count = tracker_data_item.get('channel_count', 0)
                                    channels = tracker_data_item.get('channels', [])
                                    first_seen = tracker_data_item.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    signal_reached_time = tracker_data_item.get('signal_reached_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel (—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ª–æ–≥–∏—á–µ—Å–∫–∏, –≥—Ä—É–ø–ø–∏—Ä—É—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                row = {
                    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
                    '–¢–∏–∫–µ—Ä': ticker,
                    '–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞': ticker_address,
                    '–í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞': token_age,
                    '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è': added_time,
                    
                    # –î–∞–Ω–Ω—ã–µ –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ (–∏–∑ tokens_tracker_database)
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤': channel_count,
                    '–ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ': first_seen,
                    '–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞': signal_reached_time,
                    
                    # –î–∞–Ω–Ω—ã–µ –æ Market Cap
                    'Market Cap (–Ω–∞—á–∞–ª—å–Ω—ã–π)': initial_market_cap_formatted,
                    'Market Cap (ATH)': ath_market_cap_formatted,
                    '–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ATH': ath_time,
                    '–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞': f"{multiplier}x",
                    
                    # –î–∞–Ω–Ω—ã–µ –æ DEX –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
                    'DEX': dex_info,
                    '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': txns_data_str,
                    'PumpFun —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': pumpfun_data_str,
                    'PumpFun –±—É—Å—Ç—ã': has_boosts,
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if channels:
                    row['–ö–∞–Ω–∞–ª—ã'] = ', '.join(channels)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤
                if 'volume_5m' in token_info:
                    row['–û–±—ä–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç'] = token_info.get('volume_5m', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                if 'volume_1h' in token_info:
                    row['–û–±—ä–µ–º –∑–∞ 1 —á–∞—Å'] = token_info.get('volume_1h', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ —Å–∞–π—Ç–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
                websites = token_info.get('websites', [])
                socials = token_info.get('socials', [])
                
                if websites:
                    website_links = [f"{website.get('label', 'Website')}: {website.get('url', '')}" 
                                    for website in websites if website.get('url')]
                    row['–°–∞–π—Ç—ã'] = '; '.join(website_links)
                
                if socials:
                    social_links = [f"{social.get('type', '').capitalize()}: {social.get('url', '')}" 
                                    for social in socials if social.get('url') and social.get('type')]
                    row['–°–æ—Ü—Å–µ—Ç–∏'] = '; '.join(social_links)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (–Ω–∞—á–∞–ª—å–Ω—É—é) –≤ –¥–∞–Ω–Ω—ã–µ
                tokens_data.append(row)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ {query} –¥–ª—è Excel: {e}")
                import traceback
                logger.error(traceback.format_exc())
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª
        df = pd.DataFrame(tokens_data)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f'tokens_data_{timestamp}.xlsx'
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Excel —Ñ–∞–π–ª–∞
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Tokens Data')
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['Tokens Data']
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for idx, col in enumerate(df.columns):
                max_len = max(
                    df[col].astype(str).map(len).max(),  # –¥–ª–∏–Ω–∞ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    len(str(col))  # –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ (—Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º)
                worksheet.column_dimensions[chr(65 + idx)].width = max_len + 2
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            with open(filename, 'rb') as excel_file:
                await context.bot.send_document(
                    chat_id=chat_id, 
                    document=excel_file, 
                    caption="üìä Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö."
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        await context.bot.send_message(
        chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )