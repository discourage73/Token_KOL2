import requests
import logging
import datetime
import time
import asyncio
import random
from typing import Dict, Any, Optional, Union, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from telegram.error import TimedOut, NetworkError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
import token_storage
from config import DEXSCREENER_API_URL, logger
from utils import process_token_data, format_message, format_number

# –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ API
api_request_count = 0
last_api_request_time = 0
API_REQUEST_LIMIT = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
API_COOLDOWN_TIME = 70  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

async def get_token_info(
    query: str, 
    chat_id: int, 
    message_id: Optional[int] = None, 
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        # –°–æ–æ–±—â–∞–µ–º –≤ –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {query}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DexScreener API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DexScreener API: {DEXSCREENER_API_URL}?q={query}")
        response = requests.get(f"{DEXSCREENER_API_URL}?q={query}", timeout=20)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            pairs = data.get('pairs', [])
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} –ø–∞—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
            
            if not pairs:
                if context and chat_id:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ '{query}'."
                    )
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
            token_data = pairs[0]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            token_info = process_token_data(token_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            initial_data = None
            send_growth_notification = False
            current_multiplier = 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            stored_data = token_storage.get_token_data(query)
            
            if stored_data:
                initial_data = stored_data.get('initial_data')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (initial_data and 'raw_market_cap' in initial_data and 
                    initial_data['raw_market_cap'] and token_info['raw_market_cap']):
                    initial_mcap = initial_data['raw_market_cap']
                    current_mcap = token_info['raw_market_cap']
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    if initial_mcap > 0:
                        multiplier = current_mcap / initial_mcap
                        current_multiplier = int(multiplier)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                        last_alert_multiplier = stored_data.get('last_alert_multiplier', 1)
                        
                        # –í–∞–∂–Ω–æ! –î–æ–±–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"–¢–æ–∫–µ–Ω {query}: —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {multiplier}, —Ü–µ–ª—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {current_multiplier}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç = {last_alert_multiplier}")
                        
                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å >= 2 –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç
                        if current_multiplier >= 2 and current_multiplier > last_alert_multiplier:
                            send_growth_notification = True
                            logger.info(f"–¢–†–ò–ì–ì–ï–† –ê–õ–ï–†–¢–ê: –¢–æ–∫–µ–Ω {query} –¥–æ—Å—Ç–∏–≥ –º–Ω–æ–∂–∏—Ç–µ–ª—è x{current_multiplier}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                current_time = datetime.datetime.now().strftime("%H:%M:%S")
                initial_data = {
                    'time': current_time,
                    'market_cap': token_info['market_cap'],
                    'raw_market_cap': token_info['raw_market_cap']
                }
                logger.info(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω {query} –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–∞—á–∞–ª—å–Ω—ã–º Market Cap: {token_info['market_cap']}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = format_message(token_info, initial_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{query}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å context –∏ chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if context and chat_id:
                if message_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        if "Message is not modified" not in str(e):
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            raise e
                        else:
                            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                    try:
                        sent_msg = await context.bot.send_message(
                            chat_id=chat_id,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True
                        )
                        
                        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        token_data_to_store = {
                            'last_update_time': time.time(),
                            'message_id': sent_msg.message_id,
                            'chat_id': sent_msg.chat_id,
                            'initial_data': initial_data,
                            'token_info': token_info,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                            'last_alert_multiplier': 1,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                            'added_time': time.time()  # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                        }
                        token_storage.store_token_data(query, token_data_to_store)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        raise e
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                if stored_data:
                    token_storage.update_token_field(query, 'token_info', token_info)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ {query} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ATH –º–∞—Ä–∫–µ—Ç –∫–∞–ø, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
                if token_info['raw_market_cap']:
                    ath_updated = token_storage.update_token_ath(query, token_info['raw_market_cap'])
                    logger.info(f"ATH –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {'–æ–±–Ω–æ–≤–ª–µ–Ω' if ath_updated else '–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è'}, —Ç–µ–∫—É—â–∏–π ATH: {token_storage.get_token_data(query).get('ath_market_cap', 0)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if send_growth_notification:
                    try:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                        growth_message = (
                            f"üöÄ *–ò–ö–°–ê–ù–£–õ!* üöÄ\n\n"
                            f"–¢–æ–∫–µ–Ω *{token_info['ticker']}* –≤—ã—Ä–æ—Å –≤ *{current_multiplier}x* –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n\n"
                            f"üí∞ –¢–µ–∫—É—â–∏–π Market Cap: {token_info['market_cap']}"
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                        reply_to_message_id = None
                        if message_id:
                            reply_to_message_id = message_id
                        
                        sent = await context.bot.send_message(
                            chat_id=chat_id,
                            text=growth_message,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True,
                            reply_to_message_id=reply_to_message_id
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        if sent:
                            token_storage.update_token_field(query, 'last_alert_multiplier', current_multiplier)
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞ {token_info['ticker']} –≤ {current_multiplier}x")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ: {e}")
            
            return token_info
        
        else:
            if context and chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ö–æ–¥: {response.status_code}."
                )
            return None
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ: {e}")
        if context and chat_id:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            )
        return None

async def check_market_cap_only(
    query: str,
    chat_id: int,
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ Market Cap —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    global api_request_count, last_api_request_time
    
    try:
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
        if current_time - last_api_request_time >= 60:  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            api_request_count = 0
            last_api_request_time = current_time
        
        if api_request_count >= API_REQUEST_LIMIT:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ ({API_REQUEST_LIMIT}/–º–∏–Ω). –ü–∞—É–∑–∞ {API_COOLDOWN_TIME} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(API_COOLDOWN_TIME)
            api_request_count = 0
            last_api_request_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        stored_data = token_storage.get_token_data(query)
        if not stored_data:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {query} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Market Cap")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        await asyncio.sleep(random.uniform(0.1, 0.5))
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(f"{DEXSCREENER_API_URL}?q={query}", timeout=20)
        api_request_count += 1
        
        if response.status_code == 200:
            data = response.json()
            pairs = data.get('pairs', [])
            
            if not pairs:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {query} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Market Cap")
                return None
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ Market Cap –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            token_data = pairs[0]
            market_cap = token_data.get('fdv')
            
            if not market_cap:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Market Cap –≤ token_info
            if 'token_info' not in stored_data:
                # –ï—Å–ª–∏ token_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                stored_data['token_info'] = {'raw_market_cap': market_cap}
            else:
                stored_data['token_info']['raw_market_cap'] = market_cap
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            token_storage.update_token_field(query, 'token_info', stored_data['token_info'])
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {format_number(market_cap)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ATH, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
            ath_updated = token_storage.update_token_ath(query, market_cap)
            logger.info(f"ATH –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {'–æ–±–Ω–æ–≤–ª–µ–Ω' if ath_updated else '–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è'}, —Ç–µ–∫—É—â–∏–π ATH: {token_storage.get_token_data(query).get('ath_market_cap', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            initial_data = stored_data.get('initial_data')
            send_growth_notification = False
            current_multiplier = 1
            
            if (initial_data and 'raw_market_cap' in initial_data and 
                initial_data['raw_market_cap'] and market_cap):
                initial_mcap = initial_data['raw_market_cap']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                if initial_mcap > 0:
                    multiplier = market_cap / initial_mcap
                    current_multiplier = int(multiplier)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                    last_alert_multiplier = stored_data.get('last_alert_multiplier', 1)
                    
                    # –í–∞–∂–Ω–æ! –î–æ–±–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"–¢–æ–∫–µ–Ω {query}: —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {multiplier}, —Ü–µ–ª—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å = {current_multiplier}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç = {last_alert_multiplier}")
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å >= 2 –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç
                    if current_multiplier >= 2 and current_multiplier > last_alert_multiplier:
                        send_growth_notification = True
                        logger.info(f"–¢–†–ò–ì–ì–ï–† –ê–õ–ï–†–¢–ê: –¢–æ–∫–µ–Ω {query} –¥–æ—Å—Ç–∏–≥ –º–Ω–æ–∂–∏—Ç–µ–ª—è x{current_multiplier}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if send_growth_notification and context and chat_id:
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ stored_data
                    ticker = query
                    if 'token_info' in stored_data and 'ticker' in stored_data['token_info']:
                        ticker = stored_data['token_info']['ticker']
                    
                    growth_message = (
                        f"üöÄ *–ò–ö–°–ê–ù–£–õ!* üöÄ\n\n"
                        f"–¢–æ–∫–µ–Ω *{ticker}* –≤—ã—Ä–æ—Å –≤ *{current_multiplier}x* –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n\n"
                        f"üí∞ –¢–µ–∫—É—â–∏–π Market Cap: {format_number(market_cap)}"
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    message_id = stored_data.get('message_id')
                    
                    sent = await context.bot.send_message(
                        chat_id=chat_id,
                        text=growth_message,
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True,
                        reply_to_message_id=message_id
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
                    if sent:
                        token_storage.update_token_field(query, 'last_alert_multiplier', current_multiplier)
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞ {ticker} –≤ {current_multiplier}x")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ: {e}")
            
            return {'market_cap': format_number(market_cap), 'raw_market_cap': market_cap}
        
        else:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}. –ö–æ–¥: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Market Cap –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
        return None

async def process_token_address(address: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {address}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º —Ç–æ–∫–µ–Ω–µ
    stored_data = token_storage.get_token_data(address)
    
    if stored_data:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ {address}")
        message_id = stored_data.get('message_id')
        logger.info(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
        result = await get_token_info(address, chat_id, message_id, context)
        if result:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ {address} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            logger.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ {address} –Ω–µ —É–¥–∞–ª–æ—Å—å")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ {address} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        result = await get_token_info(address, chat_id, None, context)
        if result:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ {address} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            logger.warning(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ {address} –Ω–µ —É–¥–∞–ª–∞—Å—å")

async def check_all_tokens_growth(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ—Å—Ç –º–∞—Ä–∫–µ—Ç –∫–∞–ø–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    logger.info("–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    token_storage.update_last_auto_check_time()
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    expired_tokens = token_storage.clean_expired_tokens()
    if expired_tokens:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_tokens)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    all_tokens = token_storage.get_all_tokens()
    
    for query, token_data in all_tokens.items():
        try:
            chat_id = token_data.get('chat_id')
            message_id = token_data.get('message_id')
            
            if not chat_id or not message_id:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {query}")
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ {query}")
            result = await get_token_info(query, chat_id, message_id, context)
            
            if result:
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ {query} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            else:
                logger.warning(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ {query} –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
            # –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API, –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ {query}: {e}")

async def check_all_market_caps(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Market Cap –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    logger.info("–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Market Cap –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    token_storage.update_last_auto_check_time()
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    expired_tokens = token_storage.clean_expired_tokens()
    if expired_tokens:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_tokens)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    all_tokens = token_storage.get_all_tokens()
    
    for query, token_data in all_tokens.items():
        try:
            chat_id = token_data.get('chat_id')
            
            if not chat_id:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ {query}")
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Market Cap
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Market Cap —Ç–æ–∫–µ–Ω–∞ {query}")
            result = await check_market_cap_only(query, chat_id, context)
            
            if result:
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result['market_cap']}")
            else:
                logger.warning(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query} –Ω–µ —É–¥–∞–ª–æ—Å—å")
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
            await asyncio.sleep(random.uniform(1.0, 2.0))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ Market Cap —Ç–æ–∫–µ–Ω–∞ {query}: {e}")
            await asyncio.sleep(1.0)  # –ü–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏