from telethon import TelegramClient, events
import asyncio
import logging
import sys
import re
import os
import time
import signal
import shutil
from datetime import datetime

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == 'win32':
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except AttributeError:
        # –î–ª—è Python 3.6, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ reconfigure
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import (API_ID, API_HASH, SOURCE_BOTS, TARGET_CHANNEL, 
                        NEWS_CHANNELS, NEWS_TARGET_CHANNEL, logger)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ config.py
    USING_CONFIG_LOGGER = True
except ImportError:
    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏!)
    API_ID = 25308063
    API_HASH = "458e1315175e0103f19d925204b690a5"
    SOURCE_BOTS = ["AlphAI_Signals_Bot", "ray_aqua_bot"]
    TARGET_CHANNEL = "cringemonke"
    NEWS_CHANNELS = ["cointelegraph", "coindesk", "WatcherGuru"]
    NEWS_TARGET_CHANNEL = "MoonCryptoMonkey"
    
    USING_CONFIG_LOGGER = False
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f"logs/forwarder_{datetime.now().strftime('%Y%m%d-%H%M%S')}.log", encoding='utf-8'),
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logger = logging.getLogger(__name__)
    logger.addHandler(console_handler)
    
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
message_hashes = set()
MAX_HASH_CACHE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à–µ–π –≤ –∫—ç—à–µ

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã
is_running = True


def hash_message(message):
    """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    if hasattr(message, 'text') and message.text:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return hash(f"{message.text}{message.date}")
    elif hasattr(message, 'message') and message.message:
        # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–æ
        return hash(f"{message.message}{message.date}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        return hash(f"{message.date}")


async def extract_and_format_alphai_data(message):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π AlphAI_Signals_Bot.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    """
    if not hasattr(message, 'text') or not message.text:
        return None
        
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AlphAI_Signals_Bot —Å KOL Calls
    if "**KOL Calls**" not in text and "KOL Call:" not in text:
        return None
        
    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º CA (Contract Address)
    ca_match = re.search(r'CA:[\s`]*([a-zA-Z0-9]+)', text)
    ca = ca_match.group(1) if ca_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Tag
    tag_match = re.search(r'Tag:([^\n]+)', text)
    tag = tag_match.group(1).strip() if tag_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Market Cap
    mcap_match = re.search(r'Market Cap:[\s]*(\$[0-9.]+[KMB]?)', text)
    mcap = mcap_match.group(1) if mcap_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Liquidity
    liq_match = re.search(r'Liq:[\s]*(\$[0-9.]+[KMB]?)', text)
    liq = liq_match.group(1) if liq_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Holders
    holders_match = re.search(r'Holders:[\s]*([0-9.]+[KMB]?)', text)
    holders = holders_match.group(1) if holders_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Score
    score_match = re.search(r'Score:[\s]*([0-9]+/[0-9]+)', text)
    score = score_match.group(1) if score_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Age
    age_match = re.search(r'Age:[\s]*([^\n]+)', text)
    age = age_match.group(1).strip() if age_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Smart Money Holders
    sm_match = re.search(r'([0-9]+)[\s]*Smart Money Holders', text)
    smart_money = sm_match.group(1) if sm_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Permission –∏ Top Holders
    permission_match = re.search(r'(Permission Revoked[^0-9]*Top 10 Holders:[^%]*%)', text)
    permissions = permission_match.group(1).strip() if permission_match else "N/A"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º KOL Call –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
    kol_match = re.search(r'KOL Call:[\s]*([0-9]+)[\s]*\|[\s]*Fans:[\s]*([0-9.]+[KMB]?)[\s]*\|[\s]*Views:[\s]*([0-9.]+[KMB]?)', text)
    if kol_match:
        kol_count = kol_match.group(1)
        fans = kol_match.group(2)
        views = kol_match.group(3)
    else:
        kol_count = "N/A"
        fans = "N/A"
        views = "N/A"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    formatted_text = f"""CA: {ca}
Tag: {tag}
Market Cap: {mcap}
üíß Liq: {liq}
üë• Holders: {holders} | Score: {score}
‚è∞ Age: {age}
üß† {smart_money} Smart Money Holders
{permissions}
KOL Call: {kol_count} | Fans: {fans} | Views: {views}"""

    return formatted_text


async def safe_forward_message(client, message, target):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        msg_hash = hash_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
        if msg_hash in message_hashes:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –∫—ç—à –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        message_hashes.add(msg_hash)
        if len(message_hashes) > MAX_HASH_CACHE:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ö–µ—à (–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ set –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
            message_hashes.pop()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        source = None
        if hasattr(message.chat, 'username'):
            source = message.chat.username
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        text_to_send = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç AlphAI_Signals_Bot
        if source == "AlphAI_Signals_Bot":
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç AlphAI_Signals_Bot (ID: {message.id})")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            text_to_send = await extract_and_format_alphai_data(message)
            
            if not text_to_send:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AlphAI_Signals_Bot –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ray_aqua_bot - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        elif source == "ray_aqua_bot":
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ray_aqua_bot (ID: {message.id})")
            if hasattr(message, 'text') and message.text:
                text_to_send = message.text
            elif hasattr(message, 'caption') and message.caption:
                text_to_send = message.caption
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not text_to_send:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
            return None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª @{target}")
        result = await client.send_message(
            target,
            text_to_send,
            parse_mode=None,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            link_preview=True  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        )
        
        logger.info(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ–≤—ã–π ID: {result.id if result else 'N/A'}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(1)
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


async def copy_news_message(client, message, target):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤–º–µ—Å—Ç–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        msg_hash = hash_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
        if msg_hash in message_hashes:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –∫—ç—à –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        message_hashes.add(msg_hash)
        if len(message_hashes) > MAX_HASH_CACHE:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ö–µ—à (–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ set –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
            message_hashes.pop()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_name = message.chat.username if hasattr(message.chat, 'username') else f"chat_{message.chat_id}"
        logger.info(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {source_name} (ID: {message.id})")
        
        # –í–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞
        try:
            result = await client.forward_messages(target, message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target}, –Ω–æ–≤—ã–π ID: {result[0].id if result else 'N/A'}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        text = None
        if hasattr(message, 'message') and message.message:
            text = message.message
        elif hasattr(message, 'text') and message.text:
            text = message.text
        elif hasattr(message, 'caption') and message.caption:
            text = message.caption
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
        has_media = False
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        if not os.path.exists('temp'):
            os.makedirs('temp')
        
        # –ü—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω
        file_path = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
        if hasattr(message, 'photo') and message.photo:
            has_media = True
            try:
                file_path = await message.download_media(file="temp/")
                logger.info(f"–°–∫–∞—á–∞–Ω–æ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                has_media = False
                
        elif hasattr(message, 'video') and message.video:
            has_media = True
            try:
                file_path = await message.download_media(file="temp/")
                logger.info(f"–°–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
                has_media = False
                
        elif hasattr(message, 'document') and message.document:
            has_media = True
            try:
                file_path = await message.download_media(file="temp/")
                logger.info(f"–°–∫–∞—á–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                has_media = False
        
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑
        result = None
        
        if has_media and file_path:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
            try:
                result = await client.send_file(
                    target,
                    file_path,
                    caption=text if text else None,
                    parse_mode='html'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –≤ {target}, –Ω–æ–≤—ã–π ID: {result.id if result else 'N/A'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if text:
                    try:
                        result = await client.send_message(
                            target,
                            text,
                            parse_mode='html'
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ –º–µ–¥–∏–∞) –≤ {target}")
                    except Exception as text_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç: {text_error}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                
        elif text:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            try:
                result = await client.send_message(
                    target,
                    text,
                    parse_mode='html'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {target}, –Ω–æ–≤—ã–π ID: {result.id if result else 'N/A'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –º–µ–¥–∏–∞, –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ –º–µ–¥–∏–∞, –Ω–∏ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(1)
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


async def start_forwarding():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –Ø–≤–Ω—ã–π –≤—ã–≤–æ–¥ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    print("–°–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–°–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists('temp'):
        os.makedirs('temp')
        logger.info("–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    else:
        # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            for file in os.listdir('temp'):
                file_path = os.path.join('temp', file)
                try:
                    if os.path.isfile(file_path):
                        os.unlink(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            logger.info("–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    client = TelegramClient(
        'forwarder_session', 
        API_ID, 
        API_HASH,
        connection_retries=10,
        retry_delay=5,
        auto_reconnect=True,
        request_retries=10
    )
    
    await client.start()
    
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –±–æ—Ç–æ–≤
    try:
        await client.send_message(
            TARGET_CHANNEL, 
            f"üîÑ –°–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç—ã: {', '.join(['@' + bot for bot in SOURCE_BOTS])}"
        )
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @{TARGET_CHANNEL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –±–æ—Ç–æ–≤: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    try:
        await client.send_message(
            NEWS_TARGET_CHANNEL, 
            f"üîÑ –°–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: {', '.join(['@' + channel for channel in NEWS_CHANNELS])}"
        )
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @{NEWS_TARGET_CHANNEL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±–æ—Ç–æ–≤
    bot_entities = []
    for bot_username in SOURCE_BOTS:
        try:
            entity = await client.get_entity(bot_username)
            bot_entities.append(entity)
            logger.info(f"–ë–æ—Ç @{bot_username} –Ω–∞–π–¥–µ–Ω, ID: {entity.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ @{bot_username}: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    news_entities = []
    for channel_username in NEWS_CHANNELS:
        try:
            entity = await client.get_entity(channel_username)
            news_entities.append(entity)
            logger.info(f"–ö–∞–Ω–∞–ª @{channel_username} –Ω–∞–π–¥–µ–Ω, ID: {entity.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
    @client.on(events.NewMessage(from_users=bot_entities))
    async def bot_handler(event):
        global is_running
        if not is_running:
            return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_name = event.chat.username if hasattr(event.chat, 'username') else f"chat_{event.chat_id}"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ @{source_name} (ID: {event.message.id})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_forward_message(client, event.message, TARGET_CHANNEL)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    @client.on(events.NewMessage(from_users=news_entities))
    async def news_handler(event):
        global is_running
        if not is_running:
            return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_name = event.chat.username if hasattr(event.chat, 'username') else f"chat_{event.chat_id}"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @{source_name} (ID: {event.message.id})")
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π
            await copy_news_message(client, event.message, NEWS_TARGET_CHANNEL)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        total_sources = len(bot_entities) + len(news_entities)
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {total_sources} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        while is_running:
            await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_running –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        try:
            if os.path.exists('temp'):
                for file in os.listdir('temp'):
                    file_path = os.path.join('temp', file)
                    try:
                        if os.path.isfile(file_path):
                            os.unlink(file_path)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            logger.info("–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
            
        await client.disconnect()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
def signal_handler(sig, frame):
    global is_running
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...")
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    is_running = False


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    await start_forwarding()


if __name__ == "__main__":
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        signal.signal(signal.SIGINT, signal_handler)
        
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å event loop –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Python
        if sys.version_info >= (3, 10):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        while True:
            try:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                is_running = True
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(main())
                
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à—Ç–∞—Ç–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if not is_running:
                    break
                    
            except KeyboardInterrupt:
                logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥: {e}")
                import traceback
                logger.error(traceback.format_exc())
                time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        print(traceback.format_exc())