from telethon import TelegramClient, events
import asyncio
import logging
import sys
import re
import os
import time
import signal
from datetime import datetime

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == 'win32':
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except AttributeError:
        # –î–ª—è Python 3.6, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ reconfigure
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from config import (API_ID, API_HASH, SOURCE_BOTS, TARGET_CHANNEL, 
                      NEWS_CHANNELS, NEWS_TARGET_CHANNEL, logger)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ config.py
    USING_CONFIG_LOGGER = True
except ImportError:
    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏!)
    API_ID = 25308063
    API_HASH = "458e1315175e0103f19d925204b690a5"
    SOURCE_BOTS = ["TheMobyBot", "ray_cyan_bot"]
    TARGET_CHANNEL = "cringemonke"
    NEWS_CHANNELS = ["cointelegraph", "coindesk", "WatcherGuru"]
    NEWS_TARGET_CHANNEL = "MoonCryptoMonkey"
    
    USING_CONFIG_LOGGER = False
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f"logs/forwarder_{datetime.now().strftime('%Y%m%d-%H%M%S')}.log", encoding='utf-8'),
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logger = logging.getLogger(__name__)
    logger.addHandler(console_handler)
    
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã
is_running = True

async def extract_and_format_ray_cyan_data(message):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π ray_cyan_bot.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    if not hasattr(message, 'text') or not message.text:
        return None
        
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞
    if "BUY" not in text:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        return None
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        buy_match = re.search(r'BUY ([^\s\(\)]+)', text)
        token_name = buy_match.group(1) if buy_match else "UNKNOWN"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        # –í–Ω–∞—á–∞–ª–µ –∏—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ –≤–∏–¥–∞ "BUY TOKEN on PLATFORM"
        platform_match = re.search(r'BUY [^\s\(\)]+ on ([A-Z\s]+)', text)
        platform = platform_match.group(1).strip() if platform_match else ""
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω–æ PumpSwap/PUMP FUN, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π 
        # (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: "–º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–µ –ø–∏—Å–∞—Ç—å")
        if not platform or platform == "PumpSwap" or platform == "PUMP FUN":
            platform = ""
        else:
            platform = f" on {platform}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ —á–∏—Å–ª–∞
        percent_match = re.search(r'([0-9.]+%) ([0-9,]+)/([0-9,]+)', text)
        percent = percent_match.group(1) if percent_match else ""
        numbers = f"{percent_match.group(2)}/{percent_match.group(3)}" if percent_match else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–ø–µ SOL
        swap_match = re.search(r'swapped\s+([0-9.]+)\s+SOL', text)
        sol_amount = swap_match.group(1) if swap_match else ""
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏, –∏—â–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        if not sol_amount:
            alt_swap_match = re.search(r'([0-9.]+)\s*SOL for', text)
            sol_amount = alt_swap_match.group(1) if alt_swap_match else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Market Cap (MC)
        mc_match = re.search(r'MC:?\s*(\$[0-9.]+[KMB]?)', text)
        mc_value = mc_match.group(1) if mc_match else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ (Seen)
        seen_match = re.search(r'Seen:?\s*([0-9]+[mhd][:\s]*[0-9]*[mhd]?)', text)
        seen_value = seen_match.group(1) if seen_match else ""
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–¥—Ä–µ—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ, –≥–¥–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        lines = text.split('\n')
        address = ""
        
        # –ò—â–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        for line in reversed(lines):
            line = line.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é –¥–ª–∏–Ω—É
            if re.match(r"^[A-Za-z0-9]{32,44}$", line):
                address = line
                break
        
        # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—Å—Ç–µ
        if not address:
            # –û–±—â–∏–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
            addr_matches = re.findall(r'[A-Za-z0-9]{32,44}', text)
            if addr_matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π)
                address = addr_matches[-1]
        
        # 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è PumpFun —Ñ–æ—Ä–º–∞—Ç—ã
        if not address:
            # –ò—â–µ–º –∞–¥—Ä–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å "pump" –≤ –∫–æ–Ω—Ü–µ
            pump_addr_match = re.search(r'([A-Za-z0-9]{6,}[A-Za-z0-9]*pump)["\s\)]', text)
            address = pump_addr_match.group(1) if pump_addr_match else ""
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É –≤—ã—à–µ, –∏—â–µ–º –≤ URL —Å—Å—ã–ª–∫–∞—Ö
            if not address:
                addr_url_match = re.search(r'/token/([A-Za-z0-9]{6,}[A-Za-z0-9]*pump)', text)
                address = addr_url_match.group(1) if addr_url_match else ""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
        logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {}".format(address))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å
        if not address:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        additional_info = ""
        if mc_value:
            additional_info += f" | MC: {mc_value}"
        if seen_value:
            additional_info += f" | Seen: {seen_value}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        formatted_text = f"""üü¢ BUY {token_name}{platform}

üîπ {percent} {numbers} swapped {sol_amount} SOL{additional_info}

{address}"""

        return formatted_text
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ray_cyan_bot: {}".format(e))
        import traceback
        logger.error(traceback.format_exc())
        return None


async def extract_and_format_whale_alerts(message):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–∏—Ç–∞—Ö (Whale Alerts).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å "just bought", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç "just sold".
    """
    if not hasattr(message, 'text') or not message.text:
        return None
        
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∫–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ "just bought")
    if "New Token Whale Alert" in text and "just bought" in text and "just sold" not in text:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∫–∏—Ç–∞ (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
            whale_info_match = re.search(r'(A .+? Whale just bought \$[\d.]+[KMB]? of .+?)(?=\(|\n|$)', text)
            whale_info = whale_info_match.group(1).strip() if whale_info_match else ""
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∏—Ç–µ, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not whale_info:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "just sold" –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if "just sold" in whale_info:
                return None
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ
            mc_match = re.search(r'\(MC:?\s*\$([\d.]+[KMB]?)\)', text)
            mc_info = f"(MC: ${mc_match.group(1)})" if mc_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –∏—â–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
            contract_match = re.search(r'([A-Za-z0-9]{30,})', text)
            contract_address = contract_match.group(1) if contract_match else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É —à–∞–±–ª–æ–Ω—É
            formatted_text = f"""New Token Whale Alert
üü¢ {whale_info} {mc_info}

{contract_address}"""
            
            return formatted_text
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∏—Ç–µ: {}".format(e))
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∫–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

async def start_forwarding():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    client = TelegramClient('forwarder_session', API_ID, API_HASH)
    await client.start()
    
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è TheMobyBot
        await client.send_message(
            TARGET_CHANNEL, 
            f"üîÑ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞: @TheMobyBot"
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @{}".format(TARGET_CHANNEL))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¥–ª—è ray_cyan_bot
        await client.send_message(
            "cringemonke2", 
            f"üîÑ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞: @ray_cyan_bot"
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @cringemonke2")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        news_channels_list = ", ".join([f"@{channel}" for channel in NEWS_CHANNELS])
        await client.send_message(
            NEWS_TARGET_CHANNEL, 
            f"üîÑ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: {news_channels_list}"
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @{}".format(NEWS_TARGET_CHANNEL))
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}".format(e))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage())
    async def handler(event):
        if not is_running:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = event.sender
            sender_username = sender.username if sender else "Unknown"
            
            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç TheMobyBot –≤ TARGET_CHANNEL
            if sender_username == "TheMobyBot":
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @TheMobyBot")
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
                if hasattr(event.message, 'text') and event.message.text:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "just sold"
                    # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
                    if "just sold" in event.message.text:
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'just sold', –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∫–∏—Ç–µ
                    formatted_text = await extract_and_format_whale_alerts(event.message)
                    
                    if formatted_text:
                        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∏—Ç–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    else:
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∏—Ç–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    text_to_send = formatted_text if formatted_text else event.message.text
                    
                    try:
                        await client.send_message(TARGET_CHANNEL, text_to_send)
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @TheMobyBot –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ @{}".format(TARGET_CHANNEL))
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç TheMobyBot: {}".format(e))
                        import traceback
                        logger.error(traceback.format_exc())
            
            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç ray_cyan_bot –≤ cringemonke2
            elif sender_username == "ray_cyan_bot":
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @ray_cyan_bot")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ray_cyan_bot
                if hasattr(event.message, 'text') and event.message.text:
                    formatted_text = await extract_and_format_ray_cyan_data(event.message)
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    text_to_send = formatted_text if formatted_text else event.message.text
                    
                    try:
                        await client.send_message("cringemonke2", text_to_send)
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @ray_cyan_bot –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ @cringemonke2")
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ray_cyan_bot: {}".format(e))
                        import traceback
                        logger.error(traceback.format_exc())
            
            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            elif sender_username in NEWS_CHANNELS:
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @{}".format(sender_username))
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
                if hasattr(event.message, 'text') and event.message.text:
                    try:
                        await client.send_message(NEWS_TARGET_CHANNEL, event.message.text)
                        logger.info("–ù–æ–≤–æ—Å—Ç—å –æ—Ç @{} –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ @{}".format(sender_username, NEWS_TARGET_CHANNEL))
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {}".format(e))
                        import traceback
                        logger.error(traceback.format_exc())
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}".format(e))
            import traceback
            logger.error(traceback.format_exc())
    
    # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤...")
        while is_running:
            await asyncio.sleep(60)
            logger.info("–°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {}".format(e))
        import traceback
        logger.error(traceback.format_exc())
    finally:
        await client.disconnect()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
def signal_handler(sig, frame):
    global is_running
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...")
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    is_running = False

if __name__ == "__main__":
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        signal.signal(signal.SIGINT, signal_handler)
        
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å event loop –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Python
        if sys.version_info >= (3, 10):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        asyncio.run(start_forwarding())
    except Exception as e:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {}".format(e))
        import traceback
        print(traceback.format_exc())